struct Number(value: Raw) {
    // Avoid recursive definition of -1, since constants are resolved statically
    const NEGATIVE_ONE = -1

    operator fun plus(other: Number) {
        Number(Add(value,  other.value))
    }

    operator fun minus(other: Number) {
        Number(Subtract(value, other.value))
    }

    operator fun mul(other: Number) {
        Number(Multiply(value, other.value))
    }

    operator fun div(other: Number) {
        Number(Divide(value, other.value))
    }

    operator fun mod(other: Number) {
        Number(Mod(value, other.value))
    }

    operator fun plusAssign(other: Number) {
        this = this + other
    }

    operator fun minusAssign(other: Number) {
        this = this - other
    }

    operator fun mulAssign(other: Number) {
        this = this * other
    }

    operator fun divAssign(other: Number) {
        this = this / other
    }

    operator fun modAssign(other: Number) {
        this = this % other
    }

    operator fun pow(other: Number) {
        Number(Power(value, other.value))
    }

    operator fun eq(other: Number) {
        Boolean(Equal(value, other.value))
    }

    operator fun neq(other: Number) {
        Boolean(NotEqual(value, other.value))
    }

    operator fun gt(other: Number) {
        Boolean(Greater(value, other.value))
    }

    operator fun geq(other: Number) {
        Boolean(GreaterOr(value, other.value))
    }

    operator fun lt(other: Number) {
        Boolean(Less(value, other.value))
    }

    operator fun leq(other: Number) {
        Boolean(LessOr(value, other.value))
    }

    operator fun neg() {
        this * NEGATIVE_ONE
    }

    operator fun pos() {
        this
    }

    fun log() {
        Number(Log(value))
    }

    fun abs() {
        Number(Abs(value))
    }

    fun sign() {
        Number(Sign(value))
    }

    fun ceil() {
        Number(Ceil(value))
    }

    fun floor() {
        Number(Floor(value))
    }

    fun round() {
        Number(Round(value))
    }

    fun fpart() {
        Number(Frac(value))
    }

    fun ipart() {
        Number(Trunc(value))
    }

    fun clamp(min: Number, max: Number) {
        Number(Clamp(value, min.value, max.value))
    }

    fun lerp(min: Number, max: Number) {
        Number(Lerp(min.value, max.value, value))
    }

    val percent get() { this / 100 }
    val toDeg get() { Number(Degree(value)) }
    val toRad get() { Number(Radian(value)) }

    operator fun swapWith(other: Number) {
        swap(this, other)
    }
}

fun swap(x: Number, y: Number) {
    x = x + y
    y = x - y
    x = x - y
}

fun min(a: Number, b: Number) {
    Number(Min(a, b))
}

fun max(a: Number, b: Number) {
    Number(Max(a, b))
}

fun sin(n: Number) {
    Number(Sin(n.value))
}

fun cos(n: Number) {
    Number(Cos(n.value))
}

fun tan(n: Number) {
    Number(Tan(n.value))
}

fun atan2(y: Number, x: Number) {
    Number(Arctan2(y.value, x.value))
}