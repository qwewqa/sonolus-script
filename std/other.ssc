struct Raw(value: Raw) {

}

fun draw(
    id: Number,
    x1: Number,
    y1: Number,
    x2: Number,
    y2: Number,
    x3: Number,
    y3: Number,
    x4: Number,
    y4: Number,
    z: Number,
    alpha: Number
) {
    Draw(id, x1, y1, x2, y2, x3, y3, x4, y4, z, alpha)
}

fun judge(
    src: Number,
    dst: Number,
    min1: Number,
    max1: Number,
    min2: Number,
    max2: Number,
    min3: Number,
    max3: Number
) {
    Number(Judge(src, dst, min1, max1, min2, max2, min3, max3))
}

fun judge(
    src: Number,
    dst: Number,
    max1: Number,
    max2: Number,
    max3: Number
) {
    Number(JudgeSimple(src, dst, max1, max2, max3))
}

fun getNumberOption(index: Number) {
    Number(Get(2, index.value))
}

fun getBooleanOption(index: Number) {
    Boolean(Get(2, index.value))
}

fun getNumber(id: Number, index: Number) {
    Number(Get(id.value, index.value))
}

fun getBoolean(id: Number, index: Number) {
    Boolean(Get(id.value, index.value))
}

fun set(id: Number, index: Number, value: Number) {
    Set(id.value, index.value, value.value)
}

fun set(id: Number, index: Number, value: Boolean) {
    Set(id.value, index.value, value.value)
}

fun play(id: Number, time: Number) {
    Play(id.value, time.value)
}

val now get() { getNumber(1, 0) }
val deltaTime get() { getNumber(1, 1) }
val aspectRatio get() { getNumber(1, 2) }
val audioOffset get() { getNumber(1, 3) }
val inputOffset get() { getNumber(1, 4) }

struct Rectangle(
    centerX: Number,
    centerY: Number,
    width: Number,
    height: Number,
    rotation: Number
) {
    inline val _x1 = -width / 2
    inline val _y1 = -height / 2
    inline val _x2 = -width / 2
    inline val _y2 = +height / 2
    inline val _x3 = +width / 2
    inline val _y3 = +height / 2
    inline val _x4 = +width / 2
    inline val _y4 = -height / 2

    inline val x1 = centerX + cos(rotation) * _x1 - sin(rotation) * _y1
    inline val y1 = centerY + sin(rotation) * _x1 + cos(rotation) * _y1
    inline val x2 = centerX + cos(rotation) * _x2 - sin(rotation) * _y2
    inline val y2 = centerY + sin(rotation) * _x2 + cos(rotation) * _y2
    inline val x3 = centerX + cos(rotation) * _x3 - sin(rotation) * _y3
    inline val y3 = centerY + sin(rotation) * _x3 + cos(rotation) * _y3
    inline val x4 = centerX + cos(rotation) * _x4 - sin(rotation) * _y4
    inline val y4 = centerY + sin(rotation) * _x4 + cos(rotation) * _y4

    fun drawSprite(id: Number, z: Number, alpha: Number) {
        draw(
            id, x1, y1, x2, y2, x3, y3, x4, y4, z, alpha
        )
    }

    fun flippedVertically() {
        Rectangle(centerX, centerY, width, -height, rotation)
    }

    fun rotated(angle: Number) {
        Rectangle(centerX, centerY, width, height, rotation + angle)
    }

    fun swapped() {
        Rectangle(centerX, centerY, height, width, rotation)
    }
}

struct Point(x: Number, y: Number) {
    operator fun distanceTo(other: Point) {
        ((x - other.x)**2 + (y - other.y)**2)**0.5
    }

    fun translated(x: Number, y: Number) {
        Point(this.x + x, this.y + y)
    }

    fun magnitude() {
        (x**2 + y**2)**0.5
    }

    fun angle() {
        atan2(y, x)
    }

    fun mid(other: Point) {
        Point((x + other.x) * 0.5, (y + other.y) * 0.5)
    }

    operator fun plus(other: Point) {
        Point(this.x + other.x, this.y + other.y)
    }

    operator fun minus(other: Point) {
        Point(this.x - other.x, this.y - other.y)
    }

    operator fun div(n: Number) {
        Point(x / n, y / n)
    }

    operator fun lerp(other: Point, n: Number) {
        Point(n.lerp(x, other.x), n.lerp(y, other.y))
    }

    fun rotated(angle: Number) {
        Point(
            cos(angle) * x - sin(angle) * y,
            sin(angle) * x + cos(angle) * y
        )
    }
}

fun Rectangle(
    center: Point,
    width: Number,
    height: Number,
    rotation: Number
) {
    Rectangle(center.x, center.y, width, height, rotation)
}

fun Rectangle(
    center: Point,
    width: Number,
    height: Number
) {
    Rectangle(center.x, center.y, width, height, 0)
}

fun Rectangle(
    centerX: Number,
    centerY: Number,
    width: Number,
    height: Number
) {
    Rectangle(centerX, centerY, width, height, 0)
}

fun Rectangle(
    start: Point,
    end: Point,
    width: Number
) {
    Rectangle(start.mid(end), width, (end - start).magnitude(), (end - start).angle())
}