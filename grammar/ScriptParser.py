# Generated from ScriptParser.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3V")
        buf.write("\u03c4\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\3\2\7\2\u0092\n\2\f\2\16\2\u0095")
        buf.write("\13\2\3\2\3\2\7\2\u0099\n\2\f\2\16\2\u009c\13\2\3\2\3")
        buf.write("\2\6\2\u00a0\n\2\r\2\16\2\u00a1\3\2\5\2\u00a5\n\2\7\2")
        buf.write("\u00a7\n\2\f\2\16\2\u00aa\13\2\5\2\u00ac\n\2\3\2\3\2\3")
        buf.write("\3\7\3\u00b1\n\3\f\3\16\3\u00b4\13\3\3\4\3\4\3\4\5\4\u00b9")
        buf.write("\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u00c2\n\5\3\6\3\6")
        buf.write("\3\6\3\7\3\7\7\7\u00c9\n\7\f\7\16\7\u00cc\13\7\3\7\3\7")
        buf.write("\7\7\u00d0\n\7\f\7\16\7\u00d3\13\7\3\7\3\7\7\7\u00d7\n")
        buf.write("\7\f\7\16\7\u00da\13\7\3\7\5\7\u00dd\n\7\3\7\3\7\3\7\3")
        buf.write("\b\3\b\3\t\3\t\3\t\3\t\7\t\u00e8\n\t\f\t\16\t\u00eb\13")
        buf.write("\t\5\t\u00ed\n\t\3\t\3\t\3\n\3\n\3\n\3\n\3\13\5\13\u00f6")
        buf.write("\n\13\3\13\3\13\7\13\u00fa\n\13\f\13\16\13\u00fd\13\13")
        buf.write("\3\13\3\13\3\13\7\13\u0102\n\13\f\13\16\13\u0105\13\13")
        buf.write("\3\13\3\13\3\f\3\f\7\f\u010b\n\f\f\f\16\f\u010e\13\f\3")
        buf.write("\f\7\f\u0111\n\f\f\f\16\f\u0114\13\f\3\f\7\f\u0117\n\f")
        buf.write("\f\f\16\f\u011a\13\f\3\f\3\f\3\r\3\r\3\r\5\r\u0121\n\r")
        buf.write("\3\r\7\r\u0124\n\r\f\r\16\r\u0127\13\r\3\16\3\16\3\16")
        buf.write("\3\16\7\16\u012d\n\16\f\16\16\16\u0130\13\16\5\16\u0132")
        buf.write("\n\16\3\16\3\16\3\17\5\17\u0137\n\17\3\17\3\17\3\17\3")
        buf.write("\17\3\20\3\20\7\20\u013f\n\20\f\20\16\20\u0142\13\20\3")
        buf.write("\20\3\20\3\20\7\20\u0147\n\20\f\20\16\20\u014a\13\20\3")
        buf.write("\20\3\20\3\21\3\21\3\21\3\21\7\21\u0152\n\21\f\21\16\21")
        buf.write("\u0155\13\21\5\21\u0157\n\21\3\21\3\21\3\22\3\22\3\23")
        buf.write("\3\23\7\23\u015f\n\23\f\23\16\23\u0162\13\23\3\23\7\23")
        buf.write("\u0165\n\23\f\23\16\23\u0168\13\23\3\23\7\23\u016b\n\23")
        buf.write("\f\23\16\23\u016e\13\23\3\23\3\23\3\24\3\24\3\24\3\24")
        buf.write("\5\24\u0176\n\24\3\24\7\24\u0179\n\24\f\24\16\24\u017c")
        buf.write("\13\24\3\25\5\25\u017f\n\25\3\25\3\25\3\25\7\25\u0184")
        buf.write("\n\25\f\25\16\25\u0187\13\25\3\25\3\25\7\25\u018b\n\25")
        buf.write("\f\25\16\25\u018e\13\25\3\25\5\25\u0191\n\25\3\25\7\25")
        buf.write("\u0194\n\25\f\25\16\25\u0197\13\25\3\25\5\25\u019a\n\25")
        buf.write("\3\25\7\25\u019d\n\25\f\25\16\25\u01a0\13\25\3\25\3\25")
        buf.write("\3\25\3\25\5\25\u01a6\n\25\3\25\3\25\3\25\3\25\5\25\u01ac")
        buf.write("\n\25\5\25\u01ae\n\25\5\25\u01b0\n\25\3\26\3\26\3\26\5")
        buf.write("\26\u01b5\n\26\3\26\7\26\u01b8\n\26\f\26\16\26\u01bb\13")
        buf.write("\26\3\26\3\26\7\26\u01bf\n\26\f\26\16\26\u01c2\13\26\3")
        buf.write("\26\3\26\3\27\3\27\5\27\u01c8\n\27\3\30\5\30\u01cb\n\30")
        buf.write("\3\30\3\30\7\30\u01cf\n\30\f\30\16\30\u01d2\13\30\3\30")
        buf.write("\3\30\7\30\u01d6\n\30\f\30\16\30\u01d9\13\30\3\30\3\30")
        buf.write("\5\30\u01dd\n\30\3\30\7\30\u01e0\n\30\f\30\16\30\u01e3")
        buf.write("\13\30\3\30\3\30\7\30\u01e7\n\30\f\30\16\30\u01ea\13\30")
        buf.write("\3\30\3\30\7\30\u01ee\n\30\f\30\16\30\u01f1\13\30\3\30")
        buf.write("\3\30\3\31\3\31\3\31\3\31\7\31\u01f9\n\31\f\31\16\31\u01fc")
        buf.write("\13\31\5\31\u01fe\n\31\3\31\3\31\3\32\3\32\3\33\3\33\3")
        buf.write("\34\3\34\3\34\3\34\3\35\7\35\u020b\n\35\f\35\16\35\u020e")
        buf.write("\13\35\3\35\3\35\6\35\u0212\n\35\r\35\16\35\u0213\3\35")
        buf.write("\5\35\u0217\n\35\7\35\u0219\n\35\f\35\16\35\u021c\13\35")
        buf.write("\5\35\u021e\n\35\3\36\3\36\5\36\u0222\n\36\3\37\3\37\3")
        buf.write("\37\3\37\5\37\u0228\n\37\3 \5 \u022b\n \3 \3 \5 \u022f")
        buf.write("\n \3 \3 \7 \u0233\n \f \16 \u0236\13 \3 \3 \3 \7 \u023b")
        buf.write("\n \f \16 \u023e\13 \3 \5 \u0241\n \3!\5!\u0244\n!\3!")
        buf.write("\3!\5!\u0248\n!\3!\3!\7!\u024c\n!\f!\16!\u024f\13!\3!")
        buf.write("\3!\3!\3!\3!\3!\7!\u0257\n!\f!\16!\u025a\13!\3!\3!\5!")
        buf.write("\u025e\n!\3\"\5\"\u0261\n\"\3\"\3\"\3\"\7\"\u0266\n\"")
        buf.write("\f\"\16\"\u0269\13\"\3\"\3\"\7\"\u026d\n\"\f\"\16\"\u0270")
        buf.write("\13\"\3\"\3\"\3#\3#\3#\3#\3#\5#\u0279\n#\3$\3$\3%\3%\3")
        buf.write("%\3%\7%\u0281\n%\f%\16%\u0284\13%\3&\3&\7&\u0288\n&\f")
        buf.write("&\16&\u028b\13&\3&\3&\7&\u028f\n&\f&\16&\u0292\13&\3&")
        buf.write("\7&\u0295\n&\f&\16&\u0298\13&\3\'\3\'\7\'\u029c\n\'\f")
        buf.write("\'\16\'\u029f\13\'\3\'\3\'\7\'\u02a3\n\'\f\'\16\'\u02a6")
        buf.write("\13\'\3\'\7\'\u02a9\n\'\f\'\16\'\u02ac\13\'\3(\3(\3(\7")
        buf.write("(\u02b1\n(\f(\16(\u02b4\13(\3(\3(\7(\u02b8\n(\f(\16(\u02bb")
        buf.write("\13(\3)\3)\3)\7)\u02c0\n)\f)\16)\u02c3\13)\3)\3)\5)\u02c7")
        buf.write("\n)\3*\3*\3*\7*\u02cc\n*\f*\16*\u02cf\13*\3*\3*\7*\u02d3")
        buf.write("\n*\f*\16*\u02d6\13*\3+\3+\3+\7+\u02db\n+\f+\16+\u02de")
        buf.write("\13+\3+\3+\7+\u02e2\n+\f+\16+\u02e5\13+\3,\3,\3,\7,\u02ea")
        buf.write("\n,\f,\16,\u02ed\13,\3,\3,\7,\u02f1\n,\f,\16,\u02f4\13")
        buf.write(",\3-\3-\3-\7-\u02f9\n-\f-\16-\u02fc\13-\3-\7-\u02ff\n")
        buf.write("-\f-\16-\u0302\13-\3.\7.\u0305\n.\f.\16.\u0308\13.\3.")
        buf.write("\3.\3/\3/\7/\u030e\n/\f/\16/\u0311\13/\3\60\3\60\3\60")
        buf.write("\3\60\3\60\5\60\u0318\n\60\3\61\3\61\3\61\3\61\3\62\3")
        buf.write("\62\3\63\3\63\3\63\3\63\7\63\u0324\n\63\f\63\16\63\u0327")
        buf.write("\13\63\5\63\u0329\n\63\3\63\3\63\3\64\3\64\3\65\3\65\3")
        buf.write("\66\3\66\7\66\u0333\n\66\f\66\16\66\u0336\13\66\3\66\3")
        buf.write("\66\3\66\3\66\7\66\u033c\n\66\f\66\16\66\u033f\13\66\3")
        buf.write("\66\5\66\u0342\n\66\3\66\5\66\u0345\n\66\3\66\7\66\u0348")
        buf.write("\n\66\f\66\16\66\u034b\13\66\3\66\3\66\7\66\u034f\n\66")
        buf.write("\f\66\16\66\u0352\13\66\3\66\5\66\u0355\n\66\5\66\u0357")
        buf.write("\n\66\3\67\3\67\5\67\u035b\n\67\38\38\39\39\79\u0361\n")
        buf.write("9\f9\169\u0364\139\39\39\39\39\79\u036a\n9\f9\169\u036d")
        buf.write("\139\39\59\u0370\n9\3:\6:\u0373\n:\r:\16:\u0374\3;\3;")
        buf.write("\7;\u0379\n;\f;\16;\u037c\13;\3<\3<\7<\u0380\n<\f<\16")
        buf.write("<\u0383\13<\3<\3<\7<\u0387\n<\f<\16<\u038a\13<\3=\3=\3")
        buf.write(">\3>\3?\3?\3@\3@\3A\3A\3B\3B\3B\3B\3B\3B\7B\u039c\nB\f")
        buf.write("B\16B\u039f\13B\3B\3B\3B\5B\u03a4\nB\3C\3C\3D\3D\3E\3")
        buf.write("E\3F\3F\3G\6G\u03af\nG\rG\16G\u03b0\3G\7G\u03b4\nG\fG")
        buf.write("\16G\u03b7\13G\3G\3G\7G\u03bb\nG\fG\16G\u03be\13G\5G\u03c0")
        buf.write("\nG\3H\3H\3H\2\2I\2\4\6\b\n\f\16\20\22\24\26\30\32\34")
        buf.write("\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjln")
        buf.write("prtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\2\r\3\29;\3\2BH\t\2\61\61\66\6688?@BCFGLL\3\2IK\3\2\23")
        buf.write("\24\4\2\17\17\21\22\4\2\23\26\31\31\3\2\35\"\3\2./\3\2")
        buf.write("*-\4\2\6\6\34\34\2\u040a\2\u0093\3\2\2\2\4\u00b2\3\2\2")
        buf.write("\2\6\u00b5\3\2\2\2\b\u00c1\3\2\2\2\n\u00c3\3\2\2\2\f\u00c6")
        buf.write("\3\2\2\2\16\u00e1\3\2\2\2\20\u00e3\3\2\2\2\22\u00f0\3")
        buf.write("\2\2\2\24\u00f5\3\2\2\2\26\u0108\3\2\2\2\30\u0120\3\2")
        buf.write("\2\2\32\u0128\3\2\2\2\34\u0136\3\2\2\2\36\u013c\3\2\2")
        buf.write("\2 \u014d\3\2\2\2\"\u015a\3\2\2\2$\u015c\3\2\2\2&\u0175")
        buf.write("\3\2\2\2(\u017e\3\2\2\2*\u01b1\3\2\2\2,\u01c7\3\2\2\2")
        buf.write(".\u01ca\3\2\2\2\60\u01f4\3\2\2\2\62\u0201\3\2\2\2\64\u0203")
        buf.write("\3\2\2\2\66\u0205\3\2\2\28\u020c\3\2\2\2:\u0221\3\2\2")
        buf.write("\2<\u0227\3\2\2\2>\u0240\3\2\2\2@\u025d\3\2\2\2B\u0260")
        buf.write("\3\2\2\2D\u0278\3\2\2\2F\u027a\3\2\2\2H\u027c\3\2\2\2")
        buf.write("J\u0285\3\2\2\2L\u0299\3\2\2\2N\u02ad\3\2\2\2P\u02bc\3")
        buf.write("\2\2\2R\u02c8\3\2\2\2T\u02d7\3\2\2\2V\u02e6\3\2\2\2X\u02f5")
        buf.write("\3\2\2\2Z\u0306\3\2\2\2\\\u030b\3\2\2\2^\u0317\3\2\2\2")
        buf.write("`\u0319\3\2\2\2b\u031d\3\2\2\2d\u031f\3\2\2\2f\u032c\3")
        buf.write("\2\2\2h\u032e\3\2\2\2j\u0330\3\2\2\2l\u035a\3\2\2\2n\u035c")
        buf.write("\3\2\2\2p\u035e\3\2\2\2r\u0372\3\2\2\2t\u0376\3\2\2\2")
        buf.write("v\u037d\3\2\2\2x\u038b\3\2\2\2z\u038d\3\2\2\2|\u038f\3")
        buf.write("\2\2\2~\u0391\3\2\2\2\u0080\u0393\3\2\2\2\u0082\u03a3")
        buf.write("\3\2\2\2\u0084\u03a5\3\2\2\2\u0086\u03a7\3\2\2\2\u0088")
        buf.write("\u03a9\3\2\2\2\u008a\u03ab\3\2\2\2\u008c\u03bf\3\2\2\2")
        buf.write("\u008e\u03c1\3\2\2\2\u0090\u0092\7\6\2\2\u0091\u0090\3")
        buf.write("\2\2\2\u0092\u0095\3\2\2\2\u0093\u0091\3\2\2\2\u0093\u0094")
        buf.write("\3\2\2\2\u0094\u0096\3\2\2\2\u0095\u0093\3\2\2\2\u0096")
        buf.write("\u009a\5\4\3\2\u0097\u0099\5\u008eH\2\u0098\u0097\3\2")
        buf.write("\2\2\u0099\u009c\3\2\2\2\u009a\u0098\3\2\2\2\u009a\u009b")
        buf.write("\3\2\2\2\u009b\u00ab\3\2\2\2\u009c\u009a\3\2\2\2\u009d")
        buf.write("\u00a8\5\b\5\2\u009e\u00a0\5\u008eH\2\u009f\u009e\3\2")
        buf.write("\2\2\u00a0\u00a1\3\2\2\2\u00a1\u009f\3\2\2\2\u00a1\u00a2")
        buf.write("\3\2\2\2\u00a2\u00a4\3\2\2\2\u00a3\u00a5\5\b\5\2\u00a4")
        buf.write("\u00a3\3\2\2\2\u00a4\u00a5\3\2\2\2\u00a5\u00a7\3\2\2\2")
        buf.write("\u00a6\u009f\3\2\2\2\u00a7\u00aa\3\2\2\2\u00a8\u00a6\3")
        buf.write("\2\2\2\u00a8\u00a9\3\2\2\2\u00a9\u00ac\3\2\2\2\u00aa\u00a8")
        buf.write("\3\2\2\2\u00ab\u009d\3\2\2\2\u00ab\u00ac\3\2\2\2\u00ac")
        buf.write("\u00ad\3\2\2\2\u00ad\u00ae\7\2\2\3\u00ae\3\3\2\2\2\u00af")
        buf.write("\u00b1\5\6\4\2\u00b0\u00af\3\2\2\2\u00b1\u00b4\3\2\2\2")
        buf.write("\u00b2\u00b0\3\2\2\2\u00b2\u00b3\3\2\2\2\u00b3\5\3\2\2")
        buf.write("\2\u00b4\u00b2\3\2\2\2\u00b5\u00b6\7\61\2\2\u00b6\u00b8")
        buf.write("\5x=\2\u00b7\u00b9\5\u008cG\2\u00b8\u00b7\3\2\2\2\u00b8")
        buf.write("\u00b9\3\2\2\2\u00b9\7\3\2\2\2\u00ba\u00c2\5.\30\2\u00bb")
        buf.write("\u00c2\5B\"\2\u00bc\u00c2\5\24\13\2\u00bd\u00c2\5\36\20")
        buf.write("\2\u00be\u00c2\5(\25\2\u00bf\u00c2\5\f\7\2\u00c0\u00c2")
        buf.write("\5\n\6\2\u00c1\u00ba\3\2\2\2\u00c1\u00bb\3\2\2\2\u00c1")
        buf.write("\u00bc\3\2\2\2\u00c1\u00bd\3\2\2\2\u00c1\u00be\3\2\2\2")
        buf.write("\u00c1\u00bf\3\2\2\2\u00c1\u00c0\3\2\2\2\u00c2\t\3\2\2")
        buf.write("\2\u00c3\u00c4\7\67\2\2\u00c4\u00c5\5x=\2\u00c5\13\3\2")
        buf.write("\2\2\u00c6\u00ca\7\66\2\2\u00c7\u00c9\7\6\2\2\u00c8\u00c7")
        buf.write("\3\2\2\2\u00c9\u00cc\3\2\2\2\u00ca\u00c8\3\2\2\2\u00ca")
        buf.write("\u00cb\3\2\2\2\u00cb\u00cd\3\2\2\2\u00cc\u00ca\3\2\2\2")
        buf.write("\u00cd\u00d1\5\16\b\2\u00ce\u00d0\7\6\2\2\u00cf\u00ce")
        buf.write("\3\2\2\2\u00d0\u00d3\3\2\2\2\u00d1\u00cf\3\2\2\2\u00d1")
        buf.write("\u00d2\3\2\2\2\u00d2\u00d4\3\2\2\2\u00d3\u00d1\3\2\2\2")
        buf.write("\u00d4\u00d8\7\33\2\2\u00d5\u00d7\7\6\2\2\u00d6\u00d5")
        buf.write("\3\2\2\2\u00d7\u00da\3\2\2\2\u00d8\u00d6\3\2\2\2\u00d8")
        buf.write("\u00d9\3\2\2\2\u00d9\u00dc\3\2\2\2\u00da\u00d8\3\2\2\2")
        buf.write("\u00db\u00dd\7&\2\2\u00dc\u00db\3\2\2\2\u00dc\u00dd\3")
        buf.write("\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00df\5x=\2\u00df\u00e0")
        buf.write("\5\20\t\2\u00e0\r\3\2\2\2\u00e1\u00e2\5x=\2\u00e2\17\3")
        buf.write("\2\2\2\u00e3\u00ec\7\t\2\2\u00e4\u00e9\5\22\n\2\u00e5")
        buf.write("\u00e6\7\b\2\2\u00e6\u00e8\5\22\n\2\u00e7\u00e5\3\2\2")
        buf.write("\2\u00e8\u00eb\3\2\2\2\u00e9\u00e7\3\2\2\2\u00e9\u00ea")
        buf.write("\3\2\2\2\u00ea\u00ed\3\2\2\2\u00eb\u00e9\3\2\2\2\u00ec")
        buf.write("\u00e4\3\2\2\2\u00ec\u00ed\3\2\2\2\u00ed\u00ee\3\2\2\2")
        buf.write("\u00ee\u00ef\7\n\2\2\u00ef\21\3\2\2\2\u00f0\u00f1\5x=")
        buf.write("\2\u00f1\u00f2\7\35\2\2\u00f2\u00f3\5z>\2\u00f3\23\3\2")
        buf.write("\2\2\u00f4\u00f6\5r:\2\u00f5\u00f4\3\2\2\2\u00f5\u00f6")
        buf.write("\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7\u00fb\7\62\2\2\u00f8")
        buf.write("\u00fa\7\6\2\2\u00f9\u00f8\3\2\2\2\u00fa\u00fd\3\2\2\2")
        buf.write("\u00fb\u00f9\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\u00fe\3")
        buf.write("\2\2\2\u00fd\u00fb\3\2\2\2\u00fe\u00ff\5x=\2\u00ff\u0103")
        buf.write("\5\32\16\2\u0100\u0102\7\6\2\2\u0101\u0100\3\2\2\2\u0102")
        buf.write("\u0105\3\2\2\2\u0103\u0101\3\2\2\2\u0103\u0104\3\2\2\2")
        buf.write("\u0104\u0106\3\2\2\2\u0105\u0103\3\2\2\2\u0106\u0107\5")
        buf.write("\26\f\2\u0107\25\3\2\2\2\u0108\u010c\7\r\2\2\u0109\u010b")
        buf.write("\7\6\2\2\u010a\u0109\3\2\2\2\u010b\u010e\3\2\2\2\u010c")
        buf.write("\u010a\3\2\2\2\u010c\u010d\3\2\2\2\u010d\u0112\3\2\2\2")
        buf.write("\u010e\u010c\3\2\2\2\u010f\u0111\5\30\r\2\u0110\u010f")
        buf.write("\3\2\2\2\u0111\u0114\3\2\2\2\u0112\u0110\3\2\2\2\u0112")
        buf.write("\u0113\3\2\2\2\u0113\u0118\3\2\2\2\u0114\u0112\3\2\2\2")
        buf.write("\u0115\u0117\7\6\2\2\u0116\u0115\3\2\2\2\u0117\u011a\3")
        buf.write("\2\2\2\u0118\u0116\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u011b")
        buf.write("\3\2\2\2\u011a\u0118\3\2\2\2\u011b\u011c\7\16\2\2\u011c")
        buf.write("\27\3\2\2\2\u011d\u0121\5.\30\2\u011e\u0121\5(\25\2\u011f")
        buf.write("\u0121\5B\"\2\u0120\u011d\3\2\2\2\u0120\u011e\3\2\2\2")
        buf.write("\u0120\u011f\3\2\2\2\u0121\u0125\3\2\2\2\u0122\u0124\5")
        buf.write("\u008eH\2\u0123\u0122\3\2\2\2\u0124\u0127\3\2\2\2\u0125")
        buf.write("\u0123\3\2\2\2\u0125\u0126\3\2\2\2\u0126\31\3\2\2\2\u0127")
        buf.write("\u0125\3\2\2\2\u0128\u0131\7\t\2\2\u0129\u012e\5\34\17")
        buf.write("\2\u012a\u012b\7\b\2\2\u012b\u012d\5\34\17\2\u012c\u012a")
        buf.write("\3\2\2\2\u012d\u0130\3\2\2\2\u012e\u012c\3\2\2\2\u012e")
        buf.write("\u012f\3\2\2\2\u012f\u0132\3\2\2\2\u0130\u012e\3\2\2\2")
        buf.write("\u0131\u0129\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0133\3")
        buf.write("\2\2\2\u0133\u0134\7\n\2\2\u0134\33\3\2\2\2\u0135\u0137")
        buf.write("\78\2\2\u0136\u0135\3\2\2\2\u0136\u0137\3\2\2\2\u0137")
        buf.write("\u0138\3\2\2\2\u0138\u0139\5x=\2\u0139\u013a\7\32\2\2")
        buf.write("\u013a\u013b\5F$\2\u013b\35\3\2\2\2\u013c\u0140\7\64\2")
        buf.write("\2\u013d\u013f\7\6\2\2\u013e\u013d\3\2\2\2\u013f\u0142")
        buf.write("\3\2\2\2\u0140\u013e\3\2\2\2\u0140\u0141\3\2\2\2\u0141")
        buf.write("\u0143\3\2\2\2\u0142\u0140\3\2\2\2\u0143\u0144\5x=\2\u0144")
        buf.write("\u0148\5 \21\2\u0145\u0147\7\6\2\2\u0146\u0145\3\2\2\2")
        buf.write("\u0147\u014a\3\2\2\2\u0148\u0146\3\2\2\2\u0148\u0149\3")
        buf.write("\2\2\2\u0149\u014b\3\2\2\2\u014a\u0148\3\2\2\2\u014b\u014c")
        buf.write("\5$\23\2\u014c\37\3\2\2\2\u014d\u0156\7\t\2\2\u014e\u0153")
        buf.write("\5\"\22\2\u014f\u0150\7\b\2\2\u0150\u0152\5\"\22\2\u0151")
        buf.write("\u014f\3\2\2\2\u0152\u0155\3\2\2\2\u0153\u0151\3\2\2\2")
        buf.write("\u0153\u0154\3\2\2\2\u0154\u0157\3\2\2\2\u0155\u0153\3")
        buf.write("\2\2\2\u0156\u014e\3\2\2\2\u0156\u0157\3\2\2\2\u0157\u0158")
        buf.write("\3\2\2\2\u0158\u0159\7\n\2\2\u0159!\3\2\2\2\u015a\u015b")
        buf.write("\5x=\2\u015b#\3\2\2\2\u015c\u0160\7\r\2\2\u015d\u015f")
        buf.write("\7\6\2\2\u015e\u015d\3\2\2\2\u015f\u0162\3\2\2\2\u0160")
        buf.write("\u015e\3\2\2\2\u0160\u0161\3\2\2\2\u0161\u0166\3\2\2\2")
        buf.write("\u0162\u0160\3\2\2\2\u0163\u0165\5&\24\2\u0164\u0163\3")
        buf.write("\2\2\2\u0165\u0168\3\2\2\2\u0166\u0164\3\2\2\2\u0166\u0167")
        buf.write("\3\2\2\2\u0167\u016c\3\2\2\2\u0168\u0166\3\2\2\2\u0169")
        buf.write("\u016b\7\6\2\2\u016a\u0169\3\2\2\2\u016b\u016e\3\2\2\2")
        buf.write("\u016c\u016a\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u016f\3")
        buf.write("\2\2\2\u016e\u016c\3\2\2\2\u016f\u0170\7\16\2\2\u0170")
        buf.write("%\3\2\2\2\u0171\u0176\5.\30\2\u0172\u0176\5(\25\2\u0173")
        buf.write("\u0176\5B\"\2\u0174\u0176\5*\26\2\u0175\u0171\3\2\2\2")
        buf.write("\u0175\u0172\3\2\2\2\u0175\u0173\3\2\2\2\u0175\u0174\3")
        buf.write("\2\2\2\u0176\u017a\3\2\2\2\u0177\u0179\5\u008eH\2\u0178")
        buf.write("\u0177\3\2\2\2\u0179\u017c\3\2\2\2\u017a\u0178\3\2\2\2")
        buf.write("\u017a\u017b\3\2\2\2\u017b\'\3\2\2\2\u017c\u017a\3\2\2")
        buf.write("\2\u017d\u017f\5r:\2\u017e\u017d\3\2\2\2\u017e\u017f\3")
        buf.write("\2\2\2\u017f\u0180\3\2\2\2\u0180\u0181\t\2\2\2\u0181\u0190")
        buf.write("\5x=\2\u0182\u0184\7\6\2\2\u0183\u0182\3\2\2\2\u0184\u0187")
        buf.write("\3\2\2\2\u0185\u0183\3\2\2\2\u0185\u0186\3\2\2\2\u0186")
        buf.write("\u0188\3\2\2\2\u0187\u0185\3\2\2\2\u0188\u018c\7\35\2")
        buf.write("\2\u0189\u018b\7\6\2\2\u018a\u0189\3\2\2\2\u018b\u018e")
        buf.write("\3\2\2\2\u018c\u018a\3\2\2\2\u018c\u018d\3\2\2\2\u018d")
        buf.write("\u018f\3\2\2\2\u018e\u018c\3\2\2\2\u018f\u0191\5H%\2\u0190")
        buf.write("\u0185\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u01af\3\2\2\2")
        buf.write("\u0192\u0194\7\6\2\2\u0193\u0192\3\2\2\2\u0194\u0197\3")
        buf.write("\2\2\2\u0195\u0193\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0199")
        buf.write("\3\2\2\2\u0197\u0195\3\2\2\2\u0198\u019a\5\u008cG\2\u0199")
        buf.write("\u0198\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019e\3\2\2\2")
        buf.write("\u019b\u019d\7\6\2\2\u019c\u019b\3\2\2\2\u019d\u01a0\3")
        buf.write("\2\2\2\u019e\u019c\3\2\2\2\u019e\u019f\3\2\2\2\u019f\u01ad")
        buf.write("\3\2\2\2\u01a0\u019e\3\2\2\2\u01a1\u01a5\5> \2\u01a2\u01a3")
        buf.write("\5\u008cG\2\u01a3\u01a4\5@!\2\u01a4\u01a6\3\2\2\2\u01a5")
        buf.write("\u01a2\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6\u01ae\3\2\2\2")
        buf.write("\u01a7\u01ab\5@!\2\u01a8\u01a9\5\u008cG\2\u01a9\u01aa")
        buf.write("\5> \2\u01aa\u01ac\3\2\2\2\u01ab\u01a8\3\2\2\2\u01ab\u01ac")
        buf.write("\3\2\2\2\u01ac\u01ae\3\2\2\2\u01ad\u01a1\3\2\2\2\u01ad")
        buf.write("\u01a7\3\2\2\2\u01ae\u01b0\3\2\2\2\u01af\u0195\3\2\2\2")
        buf.write("\u01af\u01b0\3\2\2\2\u01b0)\3\2\2\2\u01b1\u01b4\7\65\2")
        buf.write("\2\u01b2\u01b3\7\'\2\2\u01b3\u01b5\5,\27\2\u01b4\u01b2")
        buf.write("\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5\u01b9\3\2\2\2\u01b6")
        buf.write("\u01b8\7\6\2\2\u01b7\u01b6\3\2\2\2\u01b8\u01bb\3\2\2\2")
        buf.write("\u01b9\u01b7\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01bc\3")
        buf.write("\2\2\2\u01bb\u01b9\3\2\2\2\u01bc\u01c0\5x=\2\u01bd\u01bf")
        buf.write("\7\6\2\2\u01be\u01bd\3\2\2\2\u01bf\u01c2\3\2\2\2\u01c0")
        buf.write("\u01be\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01c3\3\2\2\2")
        buf.write("\u01c2\u01c0\3\2\2\2\u01c3\u01c4\5\64\33\2\u01c4+\3\2")
        buf.write("\2\2\u01c5\u01c8\7J\2\2\u01c6\u01c8\5x=\2\u01c7\u01c5")
        buf.write("\3\2\2\2\u01c7\u01c6\3\2\2\2\u01c8-\3\2\2\2\u01c9\u01cb")
        buf.write("\5r:\2\u01ca\u01c9\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb\u01cc")
        buf.write("\3\2\2\2\u01cc\u01dc\7\63\2\2\u01cd\u01cf\7\6\2\2\u01ce")
        buf.write("\u01cd\3\2\2\2\u01cf\u01d2\3\2\2\2\u01d0\u01ce\3\2\2\2")
        buf.write("\u01d0\u01d1\3\2\2\2\u01d1\u01d3\3\2\2\2\u01d2\u01d0\3")
        buf.write("\2\2\2\u01d3\u01d7\5F$\2\u01d4\u01d6\7\6\2\2\u01d5\u01d4")
        buf.write("\3\2\2\2\u01d6\u01d9\3\2\2\2\u01d7\u01d5\3\2\2\2\u01d7")
        buf.write("\u01d8\3\2\2\2\u01d8\u01da\3\2\2\2\u01d9\u01d7\3\2\2\2")
        buf.write("\u01da\u01db\7\7\2\2\u01db\u01dd\3\2\2\2\u01dc\u01d0\3")
        buf.write("\2\2\2\u01dc\u01dd\3\2\2\2\u01dd\u01e1\3\2\2\2\u01de\u01e0")
        buf.write("\7\6\2\2\u01df\u01de\3\2\2\2\u01e0\u01e3\3\2\2\2\u01e1")
        buf.write("\u01df\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e4\3\2\2\2")
        buf.write("\u01e3\u01e1\3\2\2\2\u01e4\u01e8\5x=\2\u01e5\u01e7\7\6")
        buf.write("\2\2\u01e6\u01e5\3\2\2\2\u01e7\u01ea\3\2\2\2\u01e8\u01e6")
        buf.write("\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01eb\3\2\2\2\u01ea")
        buf.write("\u01e8\3\2\2\2\u01eb\u01ef\5\60\31\2\u01ec\u01ee\7\6\2")
        buf.write("\2\u01ed\u01ec\3\2\2\2\u01ee\u01f1\3\2\2\2\u01ef\u01ed")
        buf.write("\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f2\3\2\2\2\u01f1")
        buf.write("\u01ef\3\2\2\2\u01f2\u01f3\5\64\33\2\u01f3/\3\2\2\2\u01f4")
        buf.write("\u01fd\7\t\2\2\u01f5\u01fa\5\62\32\2\u01f6\u01f7\7\b\2")
        buf.write("\2\u01f7\u01f9\5\62\32\2\u01f8\u01f6\3\2\2\2\u01f9\u01fc")
        buf.write("\3\2\2\2\u01fa\u01f8\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb")
        buf.write("\u01fe\3\2\2\2\u01fc\u01fa\3\2\2\2\u01fd\u01f5\3\2\2\2")
        buf.write("\u01fd\u01fe\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u0200\7")
        buf.write("\n\2\2\u0200\61\3\2\2\2\u0201\u0202\5D#\2\u0202\63\3\2")
        buf.write("\2\2\u0203\u0204\5\66\34\2\u0204\65\3\2\2\2\u0205\u0206")
        buf.write("\7\r\2\2\u0206\u0207\58\35\2\u0207\u0208\7\16\2\2\u0208")
        buf.write("\67\3\2\2\2\u0209\u020b\5\u008eH\2\u020a\u0209\3\2\2\2")
        buf.write("\u020b\u020e\3\2\2\2\u020c\u020a\3\2\2\2\u020c\u020d\3")
        buf.write("\2\2\2\u020d\u021d\3\2\2\2\u020e\u020c\3\2\2\2\u020f\u021a")
        buf.write("\5:\36\2\u0210\u0212\5\u008eH\2\u0211\u0210\3\2\2\2\u0212")
        buf.write("\u0213\3\2\2\2\u0213\u0211\3\2\2\2\u0213\u0214\3\2\2\2")
        buf.write("\u0214\u0216\3\2\2\2\u0215\u0217\5:\36\2\u0216\u0215\3")
        buf.write("\2\2\2\u0216\u0217\3\2\2\2\u0217\u0219\3\2\2\2\u0218\u0211")
        buf.write("\3\2\2\2\u0219\u021c\3\2\2\2\u021a\u0218\3\2\2\2\u021a")
        buf.write("\u021b\3\2\2\2\u021b\u021e\3\2\2\2\u021c\u021a\3\2\2\2")
        buf.write("\u021d\u020f\3\2\2\2\u021d\u021e\3\2\2\2\u021e9\3\2\2")
        buf.write("\2\u021f\u0222\5H%\2\u0220\u0222\5<\37\2\u0221\u021f\3")
        buf.write("\2\2\2\u0221\u0220\3\2\2\2\u0222;\3\2\2\2\u0223\u0228")
        buf.write("\5.\30\2\u0224\u0228\5(\25\2\u0225\u0228\5B\"\2\u0226")
        buf.write("\u0228\5\24\13\2\u0227\u0223\3\2\2\2\u0227\u0224\3\2\2")
        buf.write("\2\u0227\u0225\3\2\2\2\u0227\u0226\3\2\2\2\u0228=\3\2")
        buf.write("\2\2\u0229\u022b\5r:\2\u022a\u0229\3\2\2\2\u022a\u022b")
        buf.write("\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u0241\7?\2\2\u022d")
        buf.write("\u022f\5r:\2\u022e\u022d\3\2\2\2\u022e\u022f\3\2\2\2\u022f")
        buf.write("\u0230\3\2\2\2\u0230\u0234\7?\2\2\u0231\u0233\7\6\2\2")
        buf.write("\u0232\u0231\3\2\2\2\u0233\u0236\3\2\2\2\u0234\u0232\3")
        buf.write("\2\2\2\u0234\u0235\3\2\2\2\u0235\u0237\3\2\2\2\u0236\u0234")
        buf.write("\3\2\2\2\u0237\u0238\7\t\2\2\u0238\u023c\7\n\2\2\u0239")
        buf.write("\u023b\7\6\2\2\u023a\u0239\3\2\2\2\u023b\u023e\3\2\2\2")
        buf.write("\u023c\u023a\3\2\2\2\u023c\u023d\3\2\2\2\u023d\u023f\3")
        buf.write("\2\2\2\u023e\u023c\3\2\2\2\u023f\u0241\5\64\33\2\u0240")
        buf.write("\u022a\3\2\2\2\u0240\u022e\3\2\2\2\u0241?\3\2\2\2\u0242")
        buf.write("\u0244\5r:\2\u0243\u0242\3\2\2\2\u0243\u0244\3\2\2\2\u0244")
        buf.write("\u0245\3\2\2\2\u0245\u025e\7@\2\2\u0246\u0248\5r:\2\u0247")
        buf.write("\u0246\3\2\2\2\u0247\u0248\3\2\2\2\u0248\u0249\3\2\2\2")
        buf.write("\u0249\u024d\7@\2\2\u024a\u024c\7\6\2\2\u024b\u024a\3")
        buf.write("\2\2\2\u024c\u024f\3\2\2\2\u024d\u024b\3\2\2\2\u024d\u024e")
        buf.write("\3\2\2\2\u024e\u0250\3\2\2\2\u024f\u024d\3\2\2\2\u0250")
        buf.write("\u0251\7\t\2\2\u0251\u0252\5x=\2\u0252\u0253\7\32\2\2")
        buf.write("\u0253\u0254\5F$\2\u0254\u0258\7\n\2\2\u0255\u0257\7\6")
        buf.write("\2\2\u0256\u0255\3\2\2\2\u0257\u025a\3\2\2\2\u0258\u0256")
        buf.write("\3\2\2\2\u0258\u0259\3\2\2\2\u0259\u025b\3\2\2\2\u025a")
        buf.write("\u0258\3\2\2\2\u025b\u025c\5\64\33\2\u025c\u025e\3\2\2")
        buf.write("\2\u025d\u0243\3\2\2\2\u025d\u0247\3\2\2\2\u025eA\3\2")
        buf.write("\2\2\u025f\u0261\5r:\2\u0260\u025f\3\2\2\2\u0260\u0261")
        buf.write("\3\2\2\2\u0261\u0262\3\2\2\2\u0262\u0263\78\2\2\u0263")
        buf.write("\u0267\5x=\2\u0264\u0266\7\6\2\2\u0265\u0264\3\2\2\2\u0266")
        buf.write("\u0269\3\2\2\2\u0267\u0265\3\2\2\2\u0267\u0268\3\2\2\2")
        buf.write("\u0268\u026a\3\2\2\2\u0269\u0267\3\2\2\2\u026a\u026e\7")
        buf.write("\35\2\2\u026b\u026d\7\6\2\2\u026c\u026b\3\2\2\2\u026d")
        buf.write("\u0270\3\2\2\2\u026e\u026c\3\2\2\2\u026e\u026f\3\2\2\2")
        buf.write("\u026f\u0271\3\2\2\2\u0270\u026e\3\2\2\2\u0271\u0272\5")
        buf.write("H%\2\u0272C\3\2\2\2\u0273\u0279\5x=\2\u0274\u0275\5x=")
        buf.write("\2\u0275\u0276\7\32\2\2\u0276\u0277\5F$\2\u0277\u0279")
        buf.write("\3\2\2\2\u0278\u0273\3\2\2\2\u0278\u0274\3\2\2\2\u0279")
        buf.write("E\3\2\2\2\u027a\u027b\5x=\2\u027bG\3\2\2\2\u027c\u0282")
        buf.write("\5J&\2\u027d\u027e\5\u0086D\2\u027e\u027f\5J&\2\u027f")
        buf.write("\u0281\3\2\2\2\u0280\u027d\3\2\2\2\u0281\u0284\3\2\2\2")
        buf.write("\u0282\u0280\3\2\2\2\u0282\u0283\3\2\2\2\u0283I\3\2\2")
        buf.write("\2\u0284\u0282\3\2\2\2\u0285\u0296\5L\'\2\u0286\u0288")
        buf.write("\7\6\2\2\u0287\u0286\3\2\2\2\u0288\u028b\3\2\2\2\u0289")
        buf.write("\u0287\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u028c\3\2\2\2")
        buf.write("\u028b\u0289\3\2\2\2\u028c\u0290\7\30\2\2\u028d\u028f")
        buf.write("\7\6\2\2\u028e\u028d\3\2\2\2\u028f\u0292\3\2\2\2\u0290")
        buf.write("\u028e\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0293\3\2\2\2")
        buf.write("\u0292\u0290\3\2\2\2\u0293\u0295\5L\'\2\u0294\u0289\3")
        buf.write("\2\2\2\u0295\u0298\3\2\2\2\u0296\u0294\3\2\2\2\u0296\u0297")
        buf.write("\3\2\2\2\u0297K\3\2\2\2\u0298\u0296\3\2\2\2\u0299\u02aa")
        buf.write("\5N(\2\u029a\u029c\7\6\2\2\u029b\u029a\3\2\2\2\u029c\u029f")
        buf.write("\3\2\2\2\u029d\u029b\3\2\2\2\u029d\u029e\3\2\2\2\u029e")
        buf.write("\u02a0\3\2\2\2\u029f\u029d\3\2\2\2\u02a0\u02a4\7\27\2")
        buf.write("\2\u02a1\u02a3\7\6\2\2\u02a2\u02a1\3\2\2\2\u02a3\u02a6")
        buf.write("\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5")
        buf.write("\u02a7\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a7\u02a9\5N(\2\u02a8")
        buf.write("\u029d\3\2\2\2\u02a9\u02ac\3\2\2\2\u02aa\u02a8\3\2\2\2")
        buf.write("\u02aa\u02ab\3\2\2\2\u02abM\3\2\2\2\u02ac\u02aa\3\2\2")
        buf.write("\2\u02ad\u02b9\5P)\2\u02ae\u02b2\5\u0088E\2\u02af\u02b1")
        buf.write("\7\6\2\2\u02b0\u02af\3\2\2\2\u02b1\u02b4\3\2\2\2\u02b2")
        buf.write("\u02b0\3\2\2\2\u02b2\u02b3\3\2\2\2\u02b3\u02b5\3\2\2\2")
        buf.write("\u02b4\u02b2\3\2\2\2\u02b5\u02b6\5P)\2\u02b6\u02b8\3\2")
        buf.write("\2\2\u02b7\u02ae\3\2\2\2\u02b8\u02bb\3\2\2\2\u02b9\u02b7")
        buf.write("\3\2\2\2\u02b9\u02ba\3\2\2\2\u02baO\3\2\2\2\u02bb\u02b9")
        buf.write("\3\2\2\2\u02bc\u02c6\5R*\2\u02bd\u02c1\5\u008aF\2\u02be")
        buf.write("\u02c0\7\6\2\2\u02bf\u02be\3\2\2\2\u02c0\u02c3\3\2\2\2")
        buf.write("\u02c1\u02bf\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2\u02c4\3")
        buf.write("\2\2\2\u02c3\u02c1\3\2\2\2\u02c4\u02c5\5R*\2\u02c5\u02c7")
        buf.write("\3\2\2\2\u02c6\u02bd\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7")
        buf.write("Q\3\2\2\2\u02c8\u02d4\5T+\2\u02c9\u02cd\5x=\2\u02ca\u02cc")
        buf.write("\7\6\2\2\u02cb\u02ca\3\2\2\2\u02cc\u02cf\3\2\2\2\u02cd")
        buf.write("\u02cb\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce\u02d0\3\2\2\2")
        buf.write("\u02cf\u02cd\3\2\2\2\u02d0\u02d1\5T+\2\u02d1\u02d3\3\2")
        buf.write("\2\2\u02d2\u02c9\3\2\2\2\u02d3\u02d6\3\2\2\2\u02d4\u02d2")
        buf.write("\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5S\3\2\2\2\u02d6\u02d4")
        buf.write("\3\2\2\2\u02d7\u02e3\5V,\2\u02d8\u02dc\5|?\2\u02d9\u02db")
        buf.write("\7\6\2\2\u02da\u02d9\3\2\2\2\u02db\u02de\3\2\2\2\u02dc")
        buf.write("\u02da\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02df\3\2\2\2")
        buf.write("\u02de\u02dc\3\2\2\2\u02df\u02e0\5V,\2\u02e0\u02e2\3\2")
        buf.write("\2\2\u02e1\u02d8\3\2\2\2\u02e2\u02e5\3\2\2\2\u02e3\u02e1")
        buf.write("\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4U\3\2\2\2\u02e5\u02e3")
        buf.write("\3\2\2\2\u02e6\u02f2\5X-\2\u02e7\u02eb\5~@\2\u02e8\u02ea")
        buf.write("\7\6\2\2\u02e9\u02e8\3\2\2\2\u02ea\u02ed\3\2\2\2\u02eb")
        buf.write("\u02e9\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ee\3\2\2\2")
        buf.write("\u02ed\u02eb\3\2\2\2\u02ee\u02ef\5X-\2\u02ef\u02f1\3\2")
        buf.write("\2\2\u02f0\u02e7\3\2\2\2\u02f1\u02f4\3\2\2\2\u02f2\u02f0")
        buf.write("\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3W\3\2\2\2\u02f4\u02f2")
        buf.write("\3\2\2\2\u02f5\u0300\5Z.\2\u02f6\u02fa\7\20\2\2\u02f7")
        buf.write("\u02f9\7\6\2\2\u02f8\u02f7\3\2\2\2\u02f9\u02fc\3\2\2\2")
        buf.write("\u02fa\u02f8\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u02fd\3")
        buf.write("\2\2\2\u02fc\u02fa\3\2\2\2\u02fd\u02ff\5Z.\2\u02fe\u02f6")
        buf.write("\3\2\2\2\u02ff\u0302\3\2\2\2\u0300\u02fe\3\2\2\2\u0300")
        buf.write("\u0301\3\2\2\2\u0301Y\3\2\2\2\u0302\u0300\3\2\2\2\u0303")
        buf.write("\u0305\5\u0080A\2\u0304\u0303\3\2\2\2\u0305\u0308\3\2")
        buf.write("\2\2\u0306\u0304\3\2\2\2\u0306\u0307\3\2\2\2\u0307\u0309")
        buf.write("\3\2\2\2\u0308\u0306\3\2\2\2\u0309\u030a\5\\/\2\u030a")
        buf.write("[\3\2\2\2\u030b\u030f\5^\60\2\u030c\u030e\5\u0082B\2\u030d")
        buf.write("\u030c\3\2\2\2\u030e\u0311\3\2\2\2\u030f\u030d\3\2\2\2")
        buf.write("\u030f\u0310\3\2\2\2\u0310]\3\2\2\2\u0311\u030f\3\2\2")
        buf.write("\2\u0312\u0318\5`\61\2\u0313\u0318\5z>\2\u0314\u0318\5")
        buf.write("h\65\2\u0315\u0318\5n8\2\u0316\u0318\5x=\2\u0317\u0312")
        buf.write("\3\2\2\2\u0317\u0313\3\2\2\2\u0317\u0314\3\2\2\2\u0317")
        buf.write("\u0315\3\2\2\2\u0317\u0316\3\2\2\2\u0318_\3\2\2\2\u0319")
        buf.write("\u031a\7\t\2\2\u031a\u031b\5H%\2\u031b\u031c\7\n\2\2\u031c")
        buf.write("a\3\2\2\2\u031d\u031e\5d\63\2\u031ec\3\2\2\2\u031f\u0328")
        buf.write("\7\t\2\2\u0320\u0325\5f\64\2\u0321\u0322\7\b\2\2\u0322")
        buf.write("\u0324\5f\64\2\u0323\u0321\3\2\2\2\u0324\u0327\3\2\2\2")
        buf.write("\u0325\u0323\3\2\2\2\u0325\u0326\3\2\2\2\u0326\u0329\3")
        buf.write("\2\2\2\u0327\u0325\3\2\2\2\u0328\u0320\3\2\2\2\u0328\u0329")
        buf.write("\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u032b\7\n\2\2\u032b")
        buf.write("e\3\2\2\2\u032c\u032d\5H%\2\u032dg\3\2\2\2\u032e\u032f")
        buf.write("\5j\66\2\u032fi\3\2\2\2\u0330\u0334\7<\2\2\u0331\u0333")
        buf.write("\7\6\2\2\u0332\u0331\3\2\2\2\u0333\u0336\3\2\2\2\u0334")
        buf.write("\u0332\3\2\2\2\u0334\u0335\3\2\2\2\u0335\u0337\3\2\2\2")
        buf.write("\u0336\u0334\3\2\2\2\u0337\u0338\7\t\2\2\u0338\u0339\5")
        buf.write("H%\2\u0339\u033d\7\n\2\2\u033a\u033c\7\6\2\2\u033b\u033a")
        buf.write("\3\2\2\2\u033c\u033f\3\2\2\2\u033d\u033b\3\2\2\2\u033d")
        buf.write("\u033e\3\2\2\2\u033e\u0341\3\2\2\2\u033f\u033d\3\2\2\2")
        buf.write("\u0340\u0342\5l\67\2\u0341\u0340\3\2\2\2\u0341\u0342\3")
        buf.write("\2\2\2\u0342\u0344\3\2\2\2\u0343\u0345\7\34\2\2\u0344")
        buf.write("\u0343\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u0356\3\2\2\2")
        buf.write("\u0346\u0348\7\6\2\2\u0347\u0346\3\2\2\2\u0348\u034b\3")
        buf.write("\2\2\2\u0349\u0347\3\2\2\2\u0349\u034a\3\2\2\2\u034a\u034c")
        buf.write("\3\2\2\2\u034b\u0349\3\2\2\2\u034c\u0350\7=\2\2\u034d")
        buf.write("\u034f\7\6\2\2\u034e\u034d\3\2\2\2\u034f\u0352\3\2\2\2")
        buf.write("\u0350\u034e\3\2\2\2\u0350\u0351\3\2\2\2\u0351\u0354\3")
        buf.write("\2\2\2\u0352\u0350\3\2\2\2\u0353\u0355\5l\67\2\u0354\u0353")
        buf.write("\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u0357\3\2\2\2\u0356")
        buf.write("\u0349\3\2\2\2\u0356\u0357\3\2\2\2\u0357k\3\2\2\2\u0358")
        buf.write("\u035b\5\66\34\2\u0359\u035b\5H%\2\u035a\u0358\3\2\2\2")
        buf.write("\u035a\u0359\3\2\2\2\u035bm\3\2\2\2\u035c\u035d\5p9\2")
        buf.write("\u035do\3\2\2\2\u035e\u0362\7>\2\2\u035f\u0361\7\6\2\2")
        buf.write("\u0360\u035f\3\2\2\2\u0361\u0364\3\2\2\2\u0362\u0360\3")
        buf.write("\2\2\2\u0362\u0363\3\2\2\2\u0363\u0365\3\2\2\2\u0364\u0362")
        buf.write("\3\2\2\2\u0365\u0366\7\t\2\2\u0366\u0367\5H%\2\u0367\u036b")
        buf.write("\7\n\2\2\u0368\u036a\7\6\2\2\u0369\u0368\3\2\2\2\u036a")
        buf.write("\u036d\3\2\2\2\u036b\u0369\3\2\2\2\u036b\u036c\3\2\2\2")
        buf.write("\u036c\u036f\3\2\2\2\u036d\u036b\3\2\2\2\u036e\u0370\5")
        buf.write("l\67\2\u036f\u036e\3\2\2\2\u036f\u0370\3\2\2\2\u0370q")
        buf.write("\3\2\2\2\u0371\u0373\5t;\2\u0372\u0371\3\2\2\2\u0373\u0374")
        buf.write("\3\2\2\2\u0374\u0372\3\2\2\2\u0374\u0375\3\2\2\2\u0375")
        buf.write("s\3\2\2\2\u0376\u037a\t\3\2\2\u0377\u0379\7\6\2\2\u0378")
        buf.write("\u0377\3\2\2\2\u0379\u037c\3\2\2\2\u037a\u0378\3\2\2\2")
        buf.write("\u037a\u037b\3\2\2\2\u037bu\3\2\2\2\u037c\u037a\3\2\2")
        buf.write("\2\u037d\u0388\5x=\2\u037e\u0380\7\6\2\2\u037f\u037e\3")
        buf.write("\2\2\2\u0380\u0383\3\2\2\2\u0381\u037f\3\2\2\2\u0381\u0382")
        buf.write("\3\2\2\2\u0382\u0384\3\2\2\2\u0383\u0381\3\2\2\2\u0384")
        buf.write("\u0385\7\7\2\2\u0385\u0387\5x=\2\u0386\u0381\3\2\2\2\u0387")
        buf.write("\u038a\3\2\2\2\u0388\u0386\3\2\2\2\u0388\u0389\3\2\2\2")
        buf.write("\u0389w\3\2\2\2\u038a\u0388\3\2\2\2\u038b\u038c\t\4\2")
        buf.write("\2\u038cy\3\2\2\2\u038d\u038e\t\5\2\2\u038e{\3\2\2\2\u038f")
        buf.write("\u0390\t\6\2\2\u0390}\3\2\2\2\u0391\u0392\t\7\2\2\u0392")
        buf.write("\177\3\2\2\2\u0393\u0394\t\b\2\2\u0394\u0081\3\2\2\2\u0395")
        buf.write("\u03a4\7\25\2\2\u0396\u03a4\7\26\2\2\u0397\u0398\7\31")
        buf.write("\2\2\u0398\u03a4\7\31\2\2\u0399\u03a4\5b\62\2\u039a\u039c")
        buf.write("\7\6\2\2\u039b\u039a\3\2\2\2\u039c\u039f\3\2\2\2\u039d")
        buf.write("\u039b\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u03a0\3\2\2\2")
        buf.write("\u039f\u039d\3\2\2\2\u03a0\u03a1\5\u0084C\2\u03a1\u03a2")
        buf.write("\5x=\2\u03a2\u03a4\3\2\2\2\u03a3\u0395\3\2\2\2\u03a3\u0396")
        buf.write("\3\2\2\2\u03a3\u0397\3\2\2\2\u03a3\u0399\3\2\2\2\u03a3")
        buf.write("\u039d\3\2\2\2\u03a4\u0083\3\2\2\2\u03a5\u03a6\7\7\2\2")
        buf.write("\u03a6\u0085\3\2\2\2\u03a7\u03a8\t\t\2\2\u03a8\u0087\3")
        buf.write("\2\2\2\u03a9\u03aa\t\n\2\2\u03aa\u0089\3\2\2\2\u03ab\u03ac")
        buf.write("\t\13\2\2\u03ac\u008b\3\2\2\2\u03ad\u03af\7\6\2\2\u03ae")
        buf.write("\u03ad\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03ae\3\2\2\2")
        buf.write("\u03b0\u03b1\3\2\2\2\u03b1\u03c0\3\2\2\2\u03b2\u03b4\7")
        buf.write("\6\2\2\u03b3\u03b2\3\2\2\2\u03b4\u03b7\3\2\2\2\u03b5\u03b3")
        buf.write("\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b8\3\2\2\2\u03b7")
        buf.write("\u03b5\3\2\2\2\u03b8\u03bc\7\34\2\2\u03b9\u03bb\7\6\2")
        buf.write("\2\u03ba\u03b9\3\2\2\2\u03bb\u03be\3\2\2\2\u03bc\u03ba")
        buf.write("\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\u03c0\3\2\2\2\u03be")
        buf.write("\u03bc\3\2\2\2\u03bf\u03ae\3\2\2\2\u03bf\u03b5\3\2\2\2")
        buf.write("\u03c0\u008d\3\2\2\2\u03c1\u03c2\t\f\2\2\u03c2\u008f\3")
        buf.write("\2\2\2\u0080\u0093\u009a\u00a1\u00a4\u00a8\u00ab\u00b2")
        buf.write("\u00b8\u00c1\u00ca\u00d1\u00d8\u00dc\u00e9\u00ec\u00f5")
        buf.write("\u00fb\u0103\u010c\u0112\u0118\u0120\u0125\u012e\u0131")
        buf.write("\u0136\u0140\u0148\u0153\u0156\u0160\u0166\u016c\u0175")
        buf.write("\u017a\u017e\u0185\u018c\u0190\u0195\u0199\u019e\u01a5")
        buf.write("\u01ab\u01ad\u01af\u01b4\u01b9\u01c0\u01c7\u01ca\u01d0")
        buf.write("\u01d7\u01dc\u01e1\u01e8\u01ef\u01fa\u01fd\u020c\u0213")
        buf.write("\u0216\u021a\u021d\u0221\u0227\u022a\u022e\u0234\u023c")
        buf.write("\u0240\u0243\u0247\u024d\u0258\u025d\u0260\u0267\u026e")
        buf.write("\u0278\u0282\u0289\u0290\u0296\u029d\u02a4\u02aa\u02b2")
        buf.write("\u02b9\u02c1\u02c6\u02cd\u02d4\u02dc\u02e3\u02eb\u02f2")
        buf.write("\u02fa\u0300\u0306\u030f\u0317\u0325\u0328\u0334\u033d")
        buf.write("\u0341\u0344\u0349\u0350\u0354\u0356\u035a\u0362\u036b")
        buf.write("\u036f\u0374\u037a\u0381\u0388\u039d\u03a3\u03b0\u03b5")
        buf.write("\u03bc\u03bf")
        return buf.getvalue()


class ScriptParser ( Parser ):

    grammarFileName = "ScriptParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'.'", "','", "'('", "<INVALID>", "'['", 
                     "<INVALID>", "'{'", "'}'", "'*'", "'**'", "'%'", "'/'", 
                     "'+'", "'-'", "'++'", "'--'", "'&&'", "'||'", "'!'", 
                     "':'", "'::'", "';'", "'='", "'+='", "'-='", "'*='", 
                     "'/='", "'%='", "'->'", "'=>'", "'..'", "'#'", "'@'", 
                     "'?'", "'?:'", "'<'", "'>'", "'<='", "'>='", "'!='", 
                     "'=='", "'''", "'import'", "'struct'", "'fun'", "'script'", 
                     "'callback'", "'archetype'", "'levelvar'", "'const'", 
                     "'var'", "'val'", "'pit'", "'if'", "'else'", "'while'", 
                     "'get'", "'set'", "'as'", "'public'", "'private'", 
                     "'shared'", "'static'", "'operator'", "'data'", "'spawninit'" ]

    symbolicNames = [ "<INVALID>", "DelimitedComment", "LineComment", "WS", 
                      "NL", "DOT", "COMMA", "LPAREN", "RPAREN", "LSQUARE", 
                      "RSQUARE", "LCURL", "RCURL", "MULT", "POW", "MOD", 
                      "DIV", "ADD", "SUB", "INCR", "DECR", "CONJ", "DISJ", 
                      "EXCL", "COLON", "COLONCOLON", "SEMICOLON", "ASSIGNMENT", 
                      "ADD_ASSIGNMENT", "SUB_ASSIGNMENT", "MULT_ASSIGNMENT", 
                      "DIV_ASSIGNMENT", "MOD_ASSIGNMENT", "ARROW", "DOUBLE_ARROW", 
                      "RANGE", "HASH", "AT", "QUEST", "ELVIS", "LANGLE", 
                      "RANGLE", "LE", "GE", "EXCL_EQ", "EQEQ", "SINGLE_QUOTE", 
                      "IMPORT", "STRUCT", "FUN", "SCRIPT", "CALLBACK", "ARCHETYPE", 
                      "LEVELVAR", "CONST", "VAR", "VAL", "PIT", "IF", "ELSE", 
                      "WHILE", "GETTER", "SETTER", "AS", "PUBLIC", "PRIVATE", 
                      "SHARED", "STATIC", "OPERATOR", "DATA", "SPAWNINIT", 
                      "FloatLiteral", "IntegerLiteral", "BooleanLiteral", 
                      "Identifier", "UNICODE_CLASS_LL", "UNICODE_CLASS_LM", 
                      "UNICODE_CLASS_LO", "UNICODE_CLASS_LT", "UNICODE_CLASS_LU", 
                      "UNICODE_CLASS_ND", "UNICODE_CLASS_NL", "Inside_Comment", 
                      "Inside_WS", "Inside_NL" ]

    RULE_scriptFile = 0
    RULE_importList = 1
    RULE_importHeader = 2
    RULE_topLevelObject = 3
    RULE_levelvarDeclaration = 4
    RULE_archetypeDeclaration = 5
    RULE_archetypeName = 6
    RULE_archetypeDefaults = 7
    RULE_archetypeDefault = 8
    RULE_structDeclaration = 9
    RULE_structBody = 10
    RULE_structMemberDeclaration = 11
    RULE_structFields = 12
    RULE_structField = 13
    RULE_scriptDeclaration = 14
    RULE_scriptParameters = 15
    RULE_scriptParameter = 16
    RULE_scriptBody = 17
    RULE_scriptMemberDeclaration = 18
    RULE_propertyDeclaration = 19
    RULE_callbackDeclaration = 20
    RULE_callbackOrder = 21
    RULE_functionDeclaration = 22
    RULE_functionParameters = 23
    RULE_functionParameter = 24
    RULE_functionBody = 25
    RULE_block = 26
    RULE_statements = 27
    RULE_statement = 28
    RULE_declaration = 29
    RULE_getter = 30
    RULE_setter = 31
    RULE_constantDeclaration = 32
    RULE_parameter = 33
    RULE_userType = 34
    RULE_expression = 35
    RULE_disjunction = 36
    RULE_conjunction = 37
    RULE_equalityComparison = 38
    RULE_comparison = 39
    RULE_infixFunctionCall = 40
    RULE_additiveExpression = 41
    RULE_multiplicativeExpression = 42
    RULE_exponentiationExpression = 43
    RULE_prefixUnaryExpression = 44
    RULE_postfixUnaryExpression = 45
    RULE_atomicExpression = 46
    RULE_parenthesizedExpression = 47
    RULE_callSuffix = 48
    RULE_valueArguments = 49
    RULE_valueArgument = 50
    RULE_conditionalExpression = 51
    RULE_ifExpression = 52
    RULE_controlStructureBody = 53
    RULE_loopExpression = 54
    RULE_whileExpression = 55
    RULE_modifierList = 56
    RULE_modifier = 57
    RULE_identifier = 58
    RULE_simpleIdentifier = 59
    RULE_literalConstant = 60
    RULE_additiveOperator = 61
    RULE_multiplicativeOperation = 62
    RULE_prefixUnaryOperation = 63
    RULE_postfixUnaryOperation = 64
    RULE_memberAccessOperator = 65
    RULE_assignmentOperator = 66
    RULE_equalityOperation = 67
    RULE_comparisonOperator = 68
    RULE_semi = 69
    RULE_anysemi = 70

    ruleNames =  [ "scriptFile", "importList", "importHeader", "topLevelObject", 
                   "levelvarDeclaration", "archetypeDeclaration", "archetypeName", 
                   "archetypeDefaults", "archetypeDefault", "structDeclaration", 
                   "structBody", "structMemberDeclaration", "structFields", 
                   "structField", "scriptDeclaration", "scriptParameters", 
                   "scriptParameter", "scriptBody", "scriptMemberDeclaration", 
                   "propertyDeclaration", "callbackDeclaration", "callbackOrder", 
                   "functionDeclaration", "functionParameters", "functionParameter", 
                   "functionBody", "block", "statements", "statement", "declaration", 
                   "getter", "setter", "constantDeclaration", "parameter", 
                   "userType", "expression", "disjunction", "conjunction", 
                   "equalityComparison", "comparison", "infixFunctionCall", 
                   "additiveExpression", "multiplicativeExpression", "exponentiationExpression", 
                   "prefixUnaryExpression", "postfixUnaryExpression", "atomicExpression", 
                   "parenthesizedExpression", "callSuffix", "valueArguments", 
                   "valueArgument", "conditionalExpression", "ifExpression", 
                   "controlStructureBody", "loopExpression", "whileExpression", 
                   "modifierList", "modifier", "identifier", "simpleIdentifier", 
                   "literalConstant", "additiveOperator", "multiplicativeOperation", 
                   "prefixUnaryOperation", "postfixUnaryOperation", "memberAccessOperator", 
                   "assignmentOperator", "equalityOperation", "comparisonOperator", 
                   "semi", "anysemi" ]

    EOF = Token.EOF
    DelimitedComment=1
    LineComment=2
    WS=3
    NL=4
    DOT=5
    COMMA=6
    LPAREN=7
    RPAREN=8
    LSQUARE=9
    RSQUARE=10
    LCURL=11
    RCURL=12
    MULT=13
    POW=14
    MOD=15
    DIV=16
    ADD=17
    SUB=18
    INCR=19
    DECR=20
    CONJ=21
    DISJ=22
    EXCL=23
    COLON=24
    COLONCOLON=25
    SEMICOLON=26
    ASSIGNMENT=27
    ADD_ASSIGNMENT=28
    SUB_ASSIGNMENT=29
    MULT_ASSIGNMENT=30
    DIV_ASSIGNMENT=31
    MOD_ASSIGNMENT=32
    ARROW=33
    DOUBLE_ARROW=34
    RANGE=35
    HASH=36
    AT=37
    QUEST=38
    ELVIS=39
    LANGLE=40
    RANGLE=41
    LE=42
    GE=43
    EXCL_EQ=44
    EQEQ=45
    SINGLE_QUOTE=46
    IMPORT=47
    STRUCT=48
    FUN=49
    SCRIPT=50
    CALLBACK=51
    ARCHETYPE=52
    LEVELVAR=53
    CONST=54
    VAR=55
    VAL=56
    PIT=57
    IF=58
    ELSE=59
    WHILE=60
    GETTER=61
    SETTER=62
    AS=63
    PUBLIC=64
    PRIVATE=65
    SHARED=66
    STATIC=67
    OPERATOR=68
    DATA=69
    SPAWNINIT=70
    FloatLiteral=71
    IntegerLiteral=72
    BooleanLiteral=73
    Identifier=74
    UNICODE_CLASS_LL=75
    UNICODE_CLASS_LM=76
    UNICODE_CLASS_LO=77
    UNICODE_CLASS_LT=78
    UNICODE_CLASS_LU=79
    UNICODE_CLASS_ND=80
    UNICODE_CLASS_NL=81
    Inside_Comment=82
    Inside_WS=83
    Inside_NL=84

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ScriptFileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importList(self):
            return self.getTypedRuleContext(ScriptParser.ImportListContext,0)


        def EOF(self):
            return self.getToken(ScriptParser.EOF, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(ScriptParser.AnysemiContext,i)


        def topLevelObject(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.TopLevelObjectContext)
            else:
                return self.getTypedRuleContext(ScriptParser.TopLevelObjectContext,i)


        def getRuleIndex(self):
            return ScriptParser.RULE_scriptFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScriptFile" ):
                listener.enterScriptFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScriptFile" ):
                listener.exitScriptFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScriptFile" ):
                return visitor.visitScriptFile(self)
            else:
                return visitor.visitChildren(self)




    def scriptFile(self):

        localctx = ScriptParser.ScriptFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_scriptFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 145
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 142
                    self.match(ScriptParser.NL) 
                self.state = 147
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 148
            self.importList()
            self.state = 152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL or _la==ScriptParser.SEMICOLON:
                self.state = 149
                self.anysemi()
                self.state = 154
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (ScriptParser.STRUCT - 48)) | (1 << (ScriptParser.FUN - 48)) | (1 << (ScriptParser.SCRIPT - 48)) | (1 << (ScriptParser.ARCHETYPE - 48)) | (1 << (ScriptParser.LEVELVAR - 48)) | (1 << (ScriptParser.CONST - 48)) | (1 << (ScriptParser.VAR - 48)) | (1 << (ScriptParser.VAL - 48)) | (1 << (ScriptParser.PIT - 48)) | (1 << (ScriptParser.PUBLIC - 48)) | (1 << (ScriptParser.PRIVATE - 48)) | (1 << (ScriptParser.SHARED - 48)) | (1 << (ScriptParser.STATIC - 48)) | (1 << (ScriptParser.OPERATOR - 48)) | (1 << (ScriptParser.DATA - 48)) | (1 << (ScriptParser.SPAWNINIT - 48)))) != 0):
                self.state = 155
                self.topLevelObject()
                self.state = 166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.NL or _la==ScriptParser.SEMICOLON:
                    self.state = 157 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 156
                            self.anysemi()

                        else:
                            raise NoViableAltException(self)
                        self.state = 159 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

                    self.state = 162
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 48)) & ~0x3f) == 0 and ((1 << (_la - 48)) & ((1 << (ScriptParser.STRUCT - 48)) | (1 << (ScriptParser.FUN - 48)) | (1 << (ScriptParser.SCRIPT - 48)) | (1 << (ScriptParser.ARCHETYPE - 48)) | (1 << (ScriptParser.LEVELVAR - 48)) | (1 << (ScriptParser.CONST - 48)) | (1 << (ScriptParser.VAR - 48)) | (1 << (ScriptParser.VAL - 48)) | (1 << (ScriptParser.PIT - 48)) | (1 << (ScriptParser.PUBLIC - 48)) | (1 << (ScriptParser.PRIVATE - 48)) | (1 << (ScriptParser.SHARED - 48)) | (1 << (ScriptParser.STATIC - 48)) | (1 << (ScriptParser.OPERATOR - 48)) | (1 << (ScriptParser.DATA - 48)) | (1 << (ScriptParser.SPAWNINIT - 48)))) != 0):
                        self.state = 161
                        self.topLevelObject()


                    self.state = 168
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 171
            self.match(ScriptParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importHeader(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.ImportHeaderContext)
            else:
                return self.getTypedRuleContext(ScriptParser.ImportHeaderContext,i)


        def getRuleIndex(self):
            return ScriptParser.RULE_importList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportList" ):
                listener.enterImportList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportList" ):
                listener.exitImportList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportList" ):
                return visitor.visitImportList(self)
            else:
                return visitor.visitChildren(self)




    def importList(self):

        localctx = ScriptParser.ImportListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_importList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.IMPORT:
                self.state = 173
                self.importHeader()
                self.state = 178
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(ScriptParser.IMPORT, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def semi(self):
            return self.getTypedRuleContext(ScriptParser.SemiContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_importHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportHeader" ):
                listener.enterImportHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportHeader" ):
                listener.exitImportHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportHeader" ):
                return visitor.visitImportHeader(self)
            else:
                return visitor.visitChildren(self)




    def importHeader(self):

        localctx = ScriptParser.ImportHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 179
            self.match(ScriptParser.IMPORT)
            self.state = 180
            self.simpleIdentifier()
            self.state = 182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 181
                self.semi()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelObjectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.FunctionDeclarationContext,0)


        def constantDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.ConstantDeclarationContext,0)


        def structDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.StructDeclarationContext,0)


        def scriptDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.ScriptDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.PropertyDeclarationContext,0)


        def archetypeDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.ArchetypeDeclarationContext,0)


        def levelvarDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.LevelvarDeclarationContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_topLevelObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelObject" ):
                listener.enterTopLevelObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelObject" ):
                listener.exitTopLevelObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelObject" ):
                return visitor.visitTopLevelObject(self)
            else:
                return visitor.visitChildren(self)




    def topLevelObject(self):

        localctx = ScriptParser.TopLevelObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_topLevelObject)
        try:
            self.state = 191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 184
                self.functionDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 185
                self.constantDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 186
                self.structDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 187
                self.scriptDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 188
                self.propertyDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 189
                self.archetypeDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 190
                self.levelvarDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelvarDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEVELVAR(self):
            return self.getToken(ScriptParser.LEVELVAR, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_levelvarDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelvarDeclaration" ):
                listener.enterLevelvarDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelvarDeclaration" ):
                listener.exitLevelvarDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLevelvarDeclaration" ):
                return visitor.visitLevelvarDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def levelvarDeclaration(self):

        localctx = ScriptParser.LevelvarDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_levelvarDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            self.match(ScriptParser.LEVELVAR)
            self.state = 194
            self.simpleIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArchetypeDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCHETYPE(self):
            return self.getToken(ScriptParser.ARCHETYPE, 0)

        def archetypeName(self):
            return self.getTypedRuleContext(ScriptParser.ArchetypeNameContext,0)


        def COLONCOLON(self):
            return self.getToken(ScriptParser.COLONCOLON, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def archetypeDefaults(self):
            return self.getTypedRuleContext(ScriptParser.ArchetypeDefaultsContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def HASH(self):
            return self.getToken(ScriptParser.HASH, 0)

        def getRuleIndex(self):
            return ScriptParser.RULE_archetypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArchetypeDeclaration" ):
                listener.enterArchetypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArchetypeDeclaration" ):
                listener.exitArchetypeDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArchetypeDeclaration" ):
                return visitor.visitArchetypeDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def archetypeDeclaration(self):

        localctx = ScriptParser.ArchetypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_archetypeDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 196
            self.match(ScriptParser.ARCHETYPE)
            self.state = 200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 197
                self.match(ScriptParser.NL)
                self.state = 202
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 203
            self.archetypeName()
            self.state = 207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 204
                self.match(ScriptParser.NL)
                self.state = 209
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 210
            self.match(ScriptParser.COLONCOLON)
            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 211
                self.match(ScriptParser.NL)
                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScriptParser.HASH:
                self.state = 217
                self.match(ScriptParser.HASH)


            self.state = 220
            self.simpleIdentifier()
            self.state = 221
            self.archetypeDefaults()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArchetypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_archetypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArchetypeName" ):
                listener.enterArchetypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArchetypeName" ):
                listener.exitArchetypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArchetypeName" ):
                return visitor.visitArchetypeName(self)
            else:
                return visitor.visitChildren(self)




    def archetypeName(self):

        localctx = ScriptParser.ArchetypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_archetypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 223
            self.simpleIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArchetypeDefaultsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ScriptParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ScriptParser.RPAREN, 0)

        def archetypeDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.ArchetypeDefaultContext)
            else:
                return self.getTypedRuleContext(ScriptParser.ArchetypeDefaultContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.COMMA)
            else:
                return self.getToken(ScriptParser.COMMA, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_archetypeDefaults

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArchetypeDefaults" ):
                listener.enterArchetypeDefaults(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArchetypeDefaults" ):
                listener.exitArchetypeDefaults(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArchetypeDefaults" ):
                return visitor.visitArchetypeDefaults(self)
            else:
                return visitor.visitChildren(self)




    def archetypeDefaults(self):

        localctx = ScriptParser.ArchetypeDefaultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_archetypeDefaults)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(ScriptParser.LPAREN)
            self.state = 234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & ((1 << (ScriptParser.IMPORT - 47)) | (1 << (ScriptParser.ARCHETYPE - 47)) | (1 << (ScriptParser.CONST - 47)) | (1 << (ScriptParser.GETTER - 47)) | (1 << (ScriptParser.SETTER - 47)) | (1 << (ScriptParser.PUBLIC - 47)) | (1 << (ScriptParser.PRIVATE - 47)) | (1 << (ScriptParser.OPERATOR - 47)) | (1 << (ScriptParser.DATA - 47)) | (1 << (ScriptParser.Identifier - 47)))) != 0):
                self.state = 226
                self.archetypeDefault()
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.COMMA:
                    self.state = 227
                    self.match(ScriptParser.COMMA)
                    self.state = 228
                    self.archetypeDefault()
                    self.state = 233
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 236
            self.match(ScriptParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArchetypeDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(ScriptParser.ASSIGNMENT, 0)

        def literalConstant(self):
            return self.getTypedRuleContext(ScriptParser.LiteralConstantContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_archetypeDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArchetypeDefault" ):
                listener.enterArchetypeDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArchetypeDefault" ):
                listener.exitArchetypeDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArchetypeDefault" ):
                return visitor.visitArchetypeDefault(self)
            else:
                return visitor.visitChildren(self)




    def archetypeDefault(self):

        localctx = ScriptParser.ArchetypeDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_archetypeDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.simpleIdentifier()
            self.state = 239
            self.match(ScriptParser.ASSIGNMENT)
            self.state = 240
            self.literalConstant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(ScriptParser.STRUCT, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def structFields(self):
            return self.getTypedRuleContext(ScriptParser.StructFieldsContext,0)


        def structBody(self):
            return self.getTypedRuleContext(ScriptParser.StructBodyContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(ScriptParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaration" ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaration" ):
                listener.exitStructDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclaration" ):
                return visitor.visitStructDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def structDeclaration(self):

        localctx = ScriptParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_structDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScriptParser.PUBLIC - 64)) | (1 << (ScriptParser.PRIVATE - 64)) | (1 << (ScriptParser.SHARED - 64)) | (1 << (ScriptParser.STATIC - 64)) | (1 << (ScriptParser.OPERATOR - 64)) | (1 << (ScriptParser.DATA - 64)) | (1 << (ScriptParser.SPAWNINIT - 64)))) != 0):
                self.state = 242
                self.modifierList()


            self.state = 245
            self.match(ScriptParser.STRUCT)
            self.state = 249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 246
                self.match(ScriptParser.NL)
                self.state = 251
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 252
            self.simpleIdentifier()
            self.state = 253
            self.structFields()
            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 254
                self.match(ScriptParser.NL)
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 260
            self.structBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(ScriptParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(ScriptParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def structMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.StructMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(ScriptParser.StructMemberDeclarationContext,i)


        def getRuleIndex(self):
            return ScriptParser.RULE_structBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructBody" ):
                listener.enterStructBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructBody" ):
                listener.exitStructBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructBody" ):
                return visitor.visitStructBody(self)
            else:
                return visitor.visitChildren(self)




    def structBody(self):

        localctx = ScriptParser.StructBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_structBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.match(ScriptParser.LCURL)
            self.state = 266
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 263
                    self.match(ScriptParser.NL) 
                self.state = 268
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

            self.state = 272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & ((1 << (ScriptParser.FUN - 49)) | (1 << (ScriptParser.CONST - 49)) | (1 << (ScriptParser.VAR - 49)) | (1 << (ScriptParser.VAL - 49)) | (1 << (ScriptParser.PIT - 49)) | (1 << (ScriptParser.PUBLIC - 49)) | (1 << (ScriptParser.PRIVATE - 49)) | (1 << (ScriptParser.SHARED - 49)) | (1 << (ScriptParser.STATIC - 49)) | (1 << (ScriptParser.OPERATOR - 49)) | (1 << (ScriptParser.DATA - 49)) | (1 << (ScriptParser.SPAWNINIT - 49)))) != 0):
                self.state = 269
                self.structMemberDeclaration()
                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 275
                self.match(ScriptParser.NL)
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 281
            self.match(ScriptParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructMemberDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.FunctionDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.PropertyDeclarationContext,0)


        def constantDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.ConstantDeclarationContext,0)


        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(ScriptParser.AnysemiContext,i)


        def getRuleIndex(self):
            return ScriptParser.RULE_structMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructMemberDeclaration" ):
                listener.enterStructMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructMemberDeclaration" ):
                listener.exitStructMemberDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructMemberDeclaration" ):
                return visitor.visitStructMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def structMemberDeclaration(self):

        localctx = ScriptParser.StructMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_structMemberDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 283
                self.functionDeclaration()
                pass

            elif la_ == 2:
                self.state = 284
                self.propertyDeclaration()
                pass

            elif la_ == 3:
                self.state = 285
                self.constantDeclaration()
                pass


            self.state = 291
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 288
                    self.anysemi() 
                self.state = 293
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ScriptParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ScriptParser.RPAREN, 0)

        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(ScriptParser.StructFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.COMMA)
            else:
                return self.getToken(ScriptParser.COMMA, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_structFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructFields" ):
                listener.enterStructFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructFields" ):
                listener.exitStructFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructFields" ):
                return visitor.visitStructFields(self)
            else:
                return visitor.visitChildren(self)




    def structFields(self):

        localctx = ScriptParser.StructFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_structFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(ScriptParser.LPAREN)
            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & ((1 << (ScriptParser.IMPORT - 47)) | (1 << (ScriptParser.ARCHETYPE - 47)) | (1 << (ScriptParser.CONST - 47)) | (1 << (ScriptParser.GETTER - 47)) | (1 << (ScriptParser.SETTER - 47)) | (1 << (ScriptParser.PUBLIC - 47)) | (1 << (ScriptParser.PRIVATE - 47)) | (1 << (ScriptParser.OPERATOR - 47)) | (1 << (ScriptParser.DATA - 47)) | (1 << (ScriptParser.Identifier - 47)))) != 0):
                self.state = 295
                self.structField()
                self.state = 300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.COMMA:
                    self.state = 296
                    self.match(ScriptParser.COMMA)
                    self.state = 297
                    self.structField()
                    self.state = 302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 305
            self.match(ScriptParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(ScriptParser.COLON, 0)

        def userType(self):
            return self.getTypedRuleContext(ScriptParser.UserTypeContext,0)


        def CONST(self):
            return self.getToken(ScriptParser.CONST, 0)

        def getRuleIndex(self):
            return ScriptParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = ScriptParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_structField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 307
                self.match(ScriptParser.CONST)


            self.state = 310
            self.simpleIdentifier()
            self.state = 311
            self.match(ScriptParser.COLON)
            self.state = 312
            self.userType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCRIPT(self):
            return self.getToken(ScriptParser.SCRIPT, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def scriptParameters(self):
            return self.getTypedRuleContext(ScriptParser.ScriptParametersContext,0)


        def scriptBody(self):
            return self.getTypedRuleContext(ScriptParser.ScriptBodyContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_scriptDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScriptDeclaration" ):
                listener.enterScriptDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScriptDeclaration" ):
                listener.exitScriptDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScriptDeclaration" ):
                return visitor.visitScriptDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def scriptDeclaration(self):

        localctx = ScriptParser.ScriptDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_scriptDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(ScriptParser.SCRIPT)
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 315
                self.match(ScriptParser.NL)
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 321
            self.simpleIdentifier()
            self.state = 322
            self.scriptParameters()
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 323
                self.match(ScriptParser.NL)
                self.state = 328
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 329
            self.scriptBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ScriptParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ScriptParser.RPAREN, 0)

        def scriptParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.ScriptParameterContext)
            else:
                return self.getTypedRuleContext(ScriptParser.ScriptParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.COMMA)
            else:
                return self.getToken(ScriptParser.COMMA, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_scriptParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScriptParameters" ):
                listener.enterScriptParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScriptParameters" ):
                listener.exitScriptParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScriptParameters" ):
                return visitor.visitScriptParameters(self)
            else:
                return visitor.visitChildren(self)




    def scriptParameters(self):

        localctx = ScriptParser.ScriptParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_scriptParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self.match(ScriptParser.LPAREN)
            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & ((1 << (ScriptParser.IMPORT - 47)) | (1 << (ScriptParser.ARCHETYPE - 47)) | (1 << (ScriptParser.CONST - 47)) | (1 << (ScriptParser.GETTER - 47)) | (1 << (ScriptParser.SETTER - 47)) | (1 << (ScriptParser.PUBLIC - 47)) | (1 << (ScriptParser.PRIVATE - 47)) | (1 << (ScriptParser.OPERATOR - 47)) | (1 << (ScriptParser.DATA - 47)) | (1 << (ScriptParser.Identifier - 47)))) != 0):
                self.state = 332
                self.scriptParameter()
                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.COMMA:
                    self.state = 333
                    self.match(ScriptParser.COMMA)
                    self.state = 334
                    self.scriptParameter()
                    self.state = 339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 342
            self.match(ScriptParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_scriptParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScriptParameter" ):
                listener.enterScriptParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScriptParameter" ):
                listener.exitScriptParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScriptParameter" ):
                return visitor.visitScriptParameter(self)
            else:
                return visitor.visitChildren(self)




    def scriptParameter(self):

        localctx = ScriptParser.ScriptParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_scriptParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.simpleIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(ScriptParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(ScriptParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def scriptMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.ScriptMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(ScriptParser.ScriptMemberDeclarationContext,i)


        def getRuleIndex(self):
            return ScriptParser.RULE_scriptBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScriptBody" ):
                listener.enterScriptBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScriptBody" ):
                listener.exitScriptBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScriptBody" ):
                return visitor.visitScriptBody(self)
            else:
                return visitor.visitChildren(self)




    def scriptBody(self):

        localctx = ScriptParser.ScriptBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_scriptBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.match(ScriptParser.LCURL)
            self.state = 350
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 347
                    self.match(ScriptParser.NL) 
                self.state = 352
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & ((1 << (ScriptParser.FUN - 49)) | (1 << (ScriptParser.CALLBACK - 49)) | (1 << (ScriptParser.CONST - 49)) | (1 << (ScriptParser.VAR - 49)) | (1 << (ScriptParser.VAL - 49)) | (1 << (ScriptParser.PIT - 49)) | (1 << (ScriptParser.PUBLIC - 49)) | (1 << (ScriptParser.PRIVATE - 49)) | (1 << (ScriptParser.SHARED - 49)) | (1 << (ScriptParser.STATIC - 49)) | (1 << (ScriptParser.OPERATOR - 49)) | (1 << (ScriptParser.DATA - 49)) | (1 << (ScriptParser.SPAWNINIT - 49)))) != 0):
                self.state = 353
                self.scriptMemberDeclaration()
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 359
                self.match(ScriptParser.NL)
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 365
            self.match(ScriptParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptMemberDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.FunctionDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.PropertyDeclarationContext,0)


        def constantDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.ConstantDeclarationContext,0)


        def callbackDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.CallbackDeclarationContext,0)


        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(ScriptParser.AnysemiContext,i)


        def getRuleIndex(self):
            return ScriptParser.RULE_scriptMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScriptMemberDeclaration" ):
                listener.enterScriptMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScriptMemberDeclaration" ):
                listener.exitScriptMemberDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScriptMemberDeclaration" ):
                return visitor.visitScriptMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def scriptMemberDeclaration(self):

        localctx = ScriptParser.ScriptMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_scriptMemberDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 367
                self.functionDeclaration()
                pass

            elif la_ == 2:
                self.state = 368
                self.propertyDeclaration()
                pass

            elif la_ == 3:
                self.state = 369
                self.constantDeclaration()
                pass

            elif la_ == 4:
                self.state = 370
                self.callbackDeclaration()
                pass


            self.state = 376
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 373
                    self.anysemi() 
                self.state = 378
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def VAR(self):
            return self.getToken(ScriptParser.VAR, 0)

        def VAL(self):
            return self.getToken(ScriptParser.VAL, 0)

        def PIT(self):
            return self.getToken(ScriptParser.PIT, 0)

        def modifierList(self):
            return self.getTypedRuleContext(ScriptParser.ModifierListContext,0)


        def expression(self):
            return self.getTypedRuleContext(ScriptParser.ExpressionContext,0)


        def ASSIGNMENT(self):
            return self.getToken(ScriptParser.ASSIGNMENT, 0)

        def getter(self):
            return self.getTypedRuleContext(ScriptParser.GetterContext,0)


        def setter(self):
            return self.getTypedRuleContext(ScriptParser.SetterContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def semi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.SemiContext)
            else:
                return self.getTypedRuleContext(ScriptParser.SemiContext,i)


        def getRuleIndex(self):
            return ScriptParser.RULE_propertyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyDeclaration" ):
                listener.enterPropertyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyDeclaration" ):
                listener.exitPropertyDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyDeclaration" ):
                return visitor.visitPropertyDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def propertyDeclaration(self):

        localctx = ScriptParser.PropertyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_propertyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScriptParser.PUBLIC - 64)) | (1 << (ScriptParser.PRIVATE - 64)) | (1 << (ScriptParser.SHARED - 64)) | (1 << (ScriptParser.STATIC - 64)) | (1 << (ScriptParser.OPERATOR - 64)) | (1 << (ScriptParser.DATA - 64)) | (1 << (ScriptParser.SPAWNINIT - 64)))) != 0):
                self.state = 379
                self.modifierList()


            self.state = 382
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScriptParser.VAR) | (1 << ScriptParser.VAL) | (1 << ScriptParser.PIT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 383
            self.simpleIdentifier()
            self.state = 398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.NL:
                    self.state = 384
                    self.match(ScriptParser.NL)
                    self.state = 389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 390
                self.match(ScriptParser.ASSIGNMENT)
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.NL:
                    self.state = 391
                    self.match(ScriptParser.NL)
                    self.state = 396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 397
                self.expression()


            self.state = 429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 403
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 400
                        self.match(ScriptParser.NL) 
                    self.state = 405
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

                self.state = 407
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 406
                    self.semi()


                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.NL:
                    self.state = 409
                    self.match(ScriptParser.NL)
                    self.state = 414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 427
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 415
                    self.getter()
                    self.state = 419
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                    if la_ == 1:
                        self.state = 416
                        self.semi()
                        self.state = 417
                        self.setter()


                    pass

                elif la_ == 2:
                    self.state = 421
                    self.setter()
                    self.state = 425
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                    if la_ == 1:
                        self.state = 422
                        self.semi()
                        self.state = 423
                        self.getter()


                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallbackDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALLBACK(self):
            return self.getToken(ScriptParser.CALLBACK, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(ScriptParser.FunctionBodyContext,0)


        def AT(self):
            return self.getToken(ScriptParser.AT, 0)

        def callbackOrder(self):
            return self.getTypedRuleContext(ScriptParser.CallbackOrderContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_callbackDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallbackDeclaration" ):
                listener.enterCallbackDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallbackDeclaration" ):
                listener.exitCallbackDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallbackDeclaration" ):
                return visitor.visitCallbackDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def callbackDeclaration(self):

        localctx = ScriptParser.CallbackDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_callbackDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.match(ScriptParser.CALLBACK)
            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==ScriptParser.AT:
                self.state = 432
                self.match(ScriptParser.AT)
                self.state = 433
                self.callbackOrder()


            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 436
                self.match(ScriptParser.NL)
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 442
            self.simpleIdentifier()
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 443
                self.match(ScriptParser.NL)
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 449
            self.functionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallbackOrderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(ScriptParser.IntegerLiteral, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_callbackOrder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallbackOrder" ):
                listener.enterCallbackOrder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallbackOrder" ):
                listener.exitCallbackOrder(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallbackOrder" ):
                return visitor.visitCallbackOrder(self)
            else:
                return visitor.visitChildren(self)




    def callbackOrder(self):

        localctx = ScriptParser.CallbackOrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_callbackOrder)
        try:
            self.state = 453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ScriptParser.IntegerLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 451
                self.match(ScriptParser.IntegerLiteral)
                pass
            elif token in [ScriptParser.IMPORT, ScriptParser.ARCHETYPE, ScriptParser.CONST, ScriptParser.GETTER, ScriptParser.SETTER, ScriptParser.PUBLIC, ScriptParser.PRIVATE, ScriptParser.OPERATOR, ScriptParser.DATA, ScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 452
                self.simpleIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUN(self):
            return self.getToken(ScriptParser.FUN, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def functionParameters(self):
            return self.getTypedRuleContext(ScriptParser.FunctionParametersContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(ScriptParser.FunctionBodyContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(ScriptParser.ModifierListContext,0)


        def userType(self):
            return self.getTypedRuleContext(ScriptParser.UserTypeContext,0)


        def DOT(self):
            return self.getToken(ScriptParser.DOT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDeclaration" ):
                return visitor.visitFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def functionDeclaration(self):

        localctx = ScriptParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScriptParser.PUBLIC - 64)) | (1 << (ScriptParser.PRIVATE - 64)) | (1 << (ScriptParser.SHARED - 64)) | (1 << (ScriptParser.STATIC - 64)) | (1 << (ScriptParser.OPERATOR - 64)) | (1 << (ScriptParser.DATA - 64)) | (1 << (ScriptParser.SPAWNINIT - 64)))) != 0):
                self.state = 455
                self.modifierList()


            self.state = 458
            self.match(ScriptParser.FUN)
            self.state = 474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.NL:
                    self.state = 459
                    self.match(ScriptParser.NL)
                    self.state = 464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 465
                self.userType()
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.NL:
                    self.state = 466
                    self.match(ScriptParser.NL)
                    self.state = 471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 472
                self.match(ScriptParser.DOT)


            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 476
                self.match(ScriptParser.NL)
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 482
            self.simpleIdentifier()
            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 483
                self.match(ScriptParser.NL)
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 489
            self.functionParameters()
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 490
                self.match(ScriptParser.NL)
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 496
            self.functionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ScriptParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ScriptParser.RPAREN, 0)

        def functionParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.FunctionParameterContext)
            else:
                return self.getTypedRuleContext(ScriptParser.FunctionParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.COMMA)
            else:
                return self.getToken(ScriptParser.COMMA, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_functionParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParameters" ):
                listener.enterFunctionParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParameters" ):
                listener.exitFunctionParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionParameters" ):
                return visitor.visitFunctionParameters(self)
            else:
                return visitor.visitChildren(self)




    def functionParameters(self):

        localctx = ScriptParser.FunctionParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_functionParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(ScriptParser.LPAREN)
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & ((1 << (ScriptParser.IMPORT - 47)) | (1 << (ScriptParser.ARCHETYPE - 47)) | (1 << (ScriptParser.CONST - 47)) | (1 << (ScriptParser.GETTER - 47)) | (1 << (ScriptParser.SETTER - 47)) | (1 << (ScriptParser.PUBLIC - 47)) | (1 << (ScriptParser.PRIVATE - 47)) | (1 << (ScriptParser.OPERATOR - 47)) | (1 << (ScriptParser.DATA - 47)) | (1 << (ScriptParser.Identifier - 47)))) != 0):
                self.state = 499
                self.functionParameter()
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.COMMA:
                    self.state = 500
                    self.match(ScriptParser.COMMA)
                    self.state = 501
                    self.functionParameter()
                    self.state = 506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 509
            self.match(ScriptParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(ScriptParser.ParameterContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_functionParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParameter" ):
                listener.enterFunctionParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParameter" ):
                listener.exitFunctionParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionParameter" ):
                return visitor.visitFunctionParameter(self)
            else:
                return visitor.visitChildren(self)




    def functionParameter(self):

        localctx = ScriptParser.FunctionParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_functionParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(ScriptParser.BlockContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionBody" ):
                return visitor.visitFunctionBody(self)
            else:
                return visitor.visitChildren(self)




    def functionBody(self):

        localctx = ScriptParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_functionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(ScriptParser.LCURL, 0)

        def statements(self):
            return self.getTypedRuleContext(ScriptParser.StatementsContext,0)


        def RCURL(self):
            return self.getToken(ScriptParser.RCURL, 0)

        def getRuleIndex(self):
            return ScriptParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = ScriptParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(ScriptParser.LCURL)
            self.state = 516
            self.statements()
            self.state = 517
            self.match(ScriptParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(ScriptParser.AnysemiContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.StatementContext)
            else:
                return self.getTypedRuleContext(ScriptParser.StatementContext,i)


        def getRuleIndex(self):
            return ScriptParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = ScriptParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL or _la==ScriptParser.SEMICOLON:
                self.state = 519
                self.anysemi()
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScriptParser.LPAREN) | (1 << ScriptParser.ADD) | (1 << ScriptParser.SUB) | (1 << ScriptParser.INCR) | (1 << ScriptParser.DECR) | (1 << ScriptParser.EXCL) | (1 << ScriptParser.IMPORT) | (1 << ScriptParser.STRUCT) | (1 << ScriptParser.FUN) | (1 << ScriptParser.ARCHETYPE) | (1 << ScriptParser.CONST) | (1 << ScriptParser.VAR) | (1 << ScriptParser.VAL) | (1 << ScriptParser.PIT) | (1 << ScriptParser.IF) | (1 << ScriptParser.WHILE) | (1 << ScriptParser.GETTER) | (1 << ScriptParser.SETTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScriptParser.PUBLIC - 64)) | (1 << (ScriptParser.PRIVATE - 64)) | (1 << (ScriptParser.SHARED - 64)) | (1 << (ScriptParser.STATIC - 64)) | (1 << (ScriptParser.OPERATOR - 64)) | (1 << (ScriptParser.DATA - 64)) | (1 << (ScriptParser.SPAWNINIT - 64)) | (1 << (ScriptParser.FloatLiteral - 64)) | (1 << (ScriptParser.IntegerLiteral - 64)) | (1 << (ScriptParser.BooleanLiteral - 64)) | (1 << (ScriptParser.Identifier - 64)))) != 0):
                self.state = 525
                self.statement()
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.NL or _la==ScriptParser.SEMICOLON:
                    self.state = 527 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 526
                            self.anysemi()

                        else:
                            raise NoViableAltException(self)
                        self.state = 529 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                    self.state = 532
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScriptParser.LPAREN) | (1 << ScriptParser.ADD) | (1 << ScriptParser.SUB) | (1 << ScriptParser.INCR) | (1 << ScriptParser.DECR) | (1 << ScriptParser.EXCL) | (1 << ScriptParser.IMPORT) | (1 << ScriptParser.STRUCT) | (1 << ScriptParser.FUN) | (1 << ScriptParser.ARCHETYPE) | (1 << ScriptParser.CONST) | (1 << ScriptParser.VAR) | (1 << ScriptParser.VAL) | (1 << ScriptParser.PIT) | (1 << ScriptParser.IF) | (1 << ScriptParser.WHILE) | (1 << ScriptParser.GETTER) | (1 << ScriptParser.SETTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScriptParser.PUBLIC - 64)) | (1 << (ScriptParser.PRIVATE - 64)) | (1 << (ScriptParser.SHARED - 64)) | (1 << (ScriptParser.STATIC - 64)) | (1 << (ScriptParser.OPERATOR - 64)) | (1 << (ScriptParser.DATA - 64)) | (1 << (ScriptParser.SPAWNINIT - 64)) | (1 << (ScriptParser.FloatLiteral - 64)) | (1 << (ScriptParser.IntegerLiteral - 64)) | (1 << (ScriptParser.BooleanLiteral - 64)) | (1 << (ScriptParser.Identifier - 64)))) != 0):
                        self.state = 531
                        self.statement()


                    self.state = 538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ScriptParser.ExpressionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(ScriptParser.DeclarationContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = ScriptParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_statement)
        try:
            self.state = 543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 541
                self.expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 542
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.FunctionDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.PropertyDeclarationContext,0)


        def constantDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.ConstantDeclarationContext,0)


        def structDeclaration(self):
            return self.getTypedRuleContext(ScriptParser.StructDeclarationContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = ScriptParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_declaration)
        try:
            self.state = 549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 545
                self.functionDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 546
                self.propertyDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 547
                self.constantDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 548
                self.structDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GETTER(self):
            return self.getToken(ScriptParser.GETTER, 0)

        def modifierList(self):
            return self.getTypedRuleContext(ScriptParser.ModifierListContext,0)


        def LPAREN(self):
            return self.getToken(ScriptParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ScriptParser.RPAREN, 0)

        def functionBody(self):
            return self.getTypedRuleContext(ScriptParser.FunctionBodyContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_getter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter" ):
                listener.enterGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter" ):
                listener.exitGetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetter" ):
                return visitor.visitGetter(self)
            else:
                return visitor.visitChildren(self)




    def getter(self):

        localctx = ScriptParser.GetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_getter)
        self._la = 0 # Token type
        try:
            self.state = 574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScriptParser.PUBLIC - 64)) | (1 << (ScriptParser.PRIVATE - 64)) | (1 << (ScriptParser.SHARED - 64)) | (1 << (ScriptParser.STATIC - 64)) | (1 << (ScriptParser.OPERATOR - 64)) | (1 << (ScriptParser.DATA - 64)) | (1 << (ScriptParser.SPAWNINIT - 64)))) != 0):
                    self.state = 551
                    self.modifierList()


                self.state = 554
                self.match(ScriptParser.GETTER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScriptParser.PUBLIC - 64)) | (1 << (ScriptParser.PRIVATE - 64)) | (1 << (ScriptParser.SHARED - 64)) | (1 << (ScriptParser.STATIC - 64)) | (1 << (ScriptParser.OPERATOR - 64)) | (1 << (ScriptParser.DATA - 64)) | (1 << (ScriptParser.SPAWNINIT - 64)))) != 0):
                    self.state = 555
                    self.modifierList()


                self.state = 558
                self.match(ScriptParser.GETTER)
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.NL:
                    self.state = 559
                    self.match(ScriptParser.NL)
                    self.state = 564
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 565
                self.match(ScriptParser.LPAREN)
                self.state = 566
                self.match(ScriptParser.RPAREN)
                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.NL:
                    self.state = 567
                    self.match(ScriptParser.NL)
                    self.state = 572
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 573
                self.functionBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTER(self):
            return self.getToken(ScriptParser.SETTER, 0)

        def modifierList(self):
            return self.getTypedRuleContext(ScriptParser.ModifierListContext,0)


        def LPAREN(self):
            return self.getToken(ScriptParser.LPAREN, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(ScriptParser.COLON, 0)

        def userType(self):
            return self.getTypedRuleContext(ScriptParser.UserTypeContext,0)


        def RPAREN(self):
            return self.getToken(ScriptParser.RPAREN, 0)

        def functionBody(self):
            return self.getTypedRuleContext(ScriptParser.FunctionBodyContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_setter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter" ):
                listener.enterSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter" ):
                listener.exitSetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetter" ):
                return visitor.visitSetter(self)
            else:
                return visitor.visitChildren(self)




    def setter(self):

        localctx = ScriptParser.SetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_setter)
        self._la = 0 # Token type
        try:
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScriptParser.PUBLIC - 64)) | (1 << (ScriptParser.PRIVATE - 64)) | (1 << (ScriptParser.SHARED - 64)) | (1 << (ScriptParser.STATIC - 64)) | (1 << (ScriptParser.OPERATOR - 64)) | (1 << (ScriptParser.DATA - 64)) | (1 << (ScriptParser.SPAWNINIT - 64)))) != 0):
                    self.state = 576
                    self.modifierList()


                self.state = 579
                self.match(ScriptParser.SETTER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScriptParser.PUBLIC - 64)) | (1 << (ScriptParser.PRIVATE - 64)) | (1 << (ScriptParser.SHARED - 64)) | (1 << (ScriptParser.STATIC - 64)) | (1 << (ScriptParser.OPERATOR - 64)) | (1 << (ScriptParser.DATA - 64)) | (1 << (ScriptParser.SPAWNINIT - 64)))) != 0):
                    self.state = 580
                    self.modifierList()


                self.state = 583
                self.match(ScriptParser.SETTER)
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.NL:
                    self.state = 584
                    self.match(ScriptParser.NL)
                    self.state = 589
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 590
                self.match(ScriptParser.LPAREN)
                self.state = 591
                self.simpleIdentifier()
                self.state = 592
                self.match(ScriptParser.COLON)
                self.state = 593
                self.userType()
                self.state = 594
                self.match(ScriptParser.RPAREN)
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.NL:
                    self.state = 595
                    self.match(ScriptParser.NL)
                    self.state = 600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 601
                self.functionBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(ScriptParser.CONST, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(ScriptParser.ExpressionContext,0)


        def ASSIGNMENT(self):
            return self.getToken(ScriptParser.ASSIGNMENT, 0)

        def modifierList(self):
            return self.getTypedRuleContext(ScriptParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_constantDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclaration" ):
                listener.enterConstantDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclaration" ):
                listener.exitConstantDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDeclaration" ):
                return visitor.visitConstantDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constantDeclaration(self):

        localctx = ScriptParser.ConstantDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_constantDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScriptParser.PUBLIC - 64)) | (1 << (ScriptParser.PRIVATE - 64)) | (1 << (ScriptParser.SHARED - 64)) | (1 << (ScriptParser.STATIC - 64)) | (1 << (ScriptParser.OPERATOR - 64)) | (1 << (ScriptParser.DATA - 64)) | (1 << (ScriptParser.SPAWNINIT - 64)))) != 0):
                self.state = 605
                self.modifierList()


            self.state = 608
            self.match(ScriptParser.CONST)
            self.state = 609
            self.simpleIdentifier()
            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 610
                self.match(ScriptParser.NL)
                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 616
            self.match(ScriptParser.ASSIGNMENT)
            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 617
                self.match(ScriptParser.NL)
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 623
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(ScriptParser.COLON, 0)

        def userType(self):
            return self.getTypedRuleContext(ScriptParser.UserTypeContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = ScriptParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_parameter)
        try:
            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 625
                self.simpleIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 626
                self.simpleIdentifier()
                self.state = 627
                self.match(ScriptParser.COLON)
                self.state = 628
                self.userType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_userType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserType" ):
                listener.enterUserType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserType" ):
                listener.exitUserType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserType" ):
                return visitor.visitUserType(self)
            else:
                return visitor.visitChildren(self)




    def userType(self):

        localctx = ScriptParser.UserTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_userType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.simpleIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(ScriptParser.DisjunctionContext,i)


        def assignmentOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.AssignmentOperatorContext)
            else:
                return self.getTypedRuleContext(ScriptParser.AssignmentOperatorContext,i)


        def getRuleIndex(self):
            return ScriptParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = ScriptParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.disjunction()
            self.state = 640
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 635
                    self.assignmentOperator()
                    self.state = 636
                    self.disjunction() 
                self.state = 642
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(ScriptParser.ConjunctionContext,i)


        def DISJ(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.DISJ)
            else:
                return self.getToken(ScriptParser.DISJ, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_disjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisjunction" ):
                listener.enterDisjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisjunction" ):
                listener.exitDisjunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisjunction" ):
                return visitor.visitDisjunction(self)
            else:
                return visitor.visitChildren(self)




    def disjunction(self):

        localctx = ScriptParser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_disjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.conjunction()
            self.state = 660
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 647
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ScriptParser.NL:
                        self.state = 644
                        self.match(ScriptParser.NL)
                        self.state = 649
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 650
                    self.match(ScriptParser.DISJ)
                    self.state = 654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ScriptParser.NL:
                        self.state = 651
                        self.match(ScriptParser.NL)
                        self.state = 656
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 657
                    self.conjunction() 
                self.state = 662
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityComparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.EqualityComparisonContext)
            else:
                return self.getTypedRuleContext(ScriptParser.EqualityComparisonContext,i)


        def CONJ(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.CONJ)
            else:
                return self.getToken(ScriptParser.CONJ, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_conjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunction" ):
                listener.enterConjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunction" ):
                listener.exitConjunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConjunction" ):
                return visitor.visitConjunction(self)
            else:
                return visitor.visitChildren(self)




    def conjunction(self):

        localctx = ScriptParser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_conjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.equalityComparison()
            self.state = 680
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ScriptParser.NL:
                        self.state = 664
                        self.match(ScriptParser.NL)
                        self.state = 669
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 670
                    self.match(ScriptParser.CONJ)
                    self.state = 674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ScriptParser.NL:
                        self.state = 671
                        self.match(ScriptParser.NL)
                        self.state = 676
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 677
                    self.equalityComparison() 
                self.state = 682
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(ScriptParser.ComparisonContext,i)


        def equalityOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.EqualityOperationContext)
            else:
                return self.getTypedRuleContext(ScriptParser.EqualityOperationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_equalityComparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityComparison" ):
                listener.enterEqualityComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityComparison" ):
                listener.exitEqualityComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityComparison" ):
                return visitor.visitEqualityComparison(self)
            else:
                return visitor.visitChildren(self)




    def equalityComparison(self):

        localctx = ScriptParser.EqualityComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_equalityComparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.comparison()
            self.state = 695
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 684
                    self.equalityOperation()
                    self.state = 688
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ScriptParser.NL:
                        self.state = 685
                        self.match(ScriptParser.NL)
                        self.state = 690
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 691
                    self.comparison() 
                self.state = 697
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def infixFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.InfixFunctionCallContext)
            else:
                return self.getTypedRuleContext(ScriptParser.InfixFunctionCallContext,i)


        def comparisonOperator(self):
            return self.getTypedRuleContext(ScriptParser.ComparisonOperatorContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = ScriptParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.infixFunctionCall()
            self.state = 708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 699
                self.comparisonOperator()
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.NL:
                    self.state = 700
                    self.match(ScriptParser.NL)
                    self.state = 705
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 706
                self.infixFunctionCall()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InfixFunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(ScriptParser.AdditiveExpressionContext,i)


        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_infixFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfixFunctionCall" ):
                listener.enterInfixFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfixFunctionCall" ):
                listener.exitInfixFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfixFunctionCall" ):
                return visitor.visitInfixFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def infixFunctionCall(self):

        localctx = ScriptParser.InfixFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_infixFunctionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.additiveExpression()
            self.state = 722
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 711
                    self.simpleIdentifier()
                    self.state = 715
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ScriptParser.NL:
                        self.state = 712
                        self.match(ScriptParser.NL)
                        self.state = 717
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 718
                    self.additiveExpression() 
                self.state = 724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(ScriptParser.MultiplicativeExpressionContext,i)


        def additiveOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.AdditiveOperatorContext)
            else:
                return self.getTypedRuleContext(ScriptParser.AdditiveOperatorContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)




    def additiveExpression(self):

        localctx = ScriptParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.multiplicativeExpression()
            self.state = 737
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 726
                    self.additiveOperator()
                    self.state = 730
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ScriptParser.NL:
                        self.state = 727
                        self.match(ScriptParser.NL)
                        self.state = 732
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 733
                    self.multiplicativeExpression() 
                self.state = 739
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exponentiationExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.ExponentiationExpressionContext)
            else:
                return self.getTypedRuleContext(ScriptParser.ExponentiationExpressionContext,i)


        def multiplicativeOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.MultiplicativeOperationContext)
            else:
                return self.getTypedRuleContext(ScriptParser.MultiplicativeOperationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeExpression(self):

        localctx = ScriptParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.exponentiationExpression()
            self.state = 752
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 741
                    self.multiplicativeOperation()
                    self.state = 745
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ScriptParser.NL:
                        self.state = 742
                        self.match(ScriptParser.NL)
                        self.state = 747
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 748
                    self.exponentiationExpression() 
                self.state = 754
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExponentiationExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixUnaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.PrefixUnaryExpressionContext)
            else:
                return self.getTypedRuleContext(ScriptParser.PrefixUnaryExpressionContext,i)


        def POW(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.POW)
            else:
                return self.getToken(ScriptParser.POW, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_exponentiationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentiationExpression" ):
                listener.enterExponentiationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentiationExpression" ):
                listener.exitExponentiationExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExponentiationExpression" ):
                return visitor.visitExponentiationExpression(self)
            else:
                return visitor.visitChildren(self)




    def exponentiationExpression(self):

        localctx = ScriptParser.ExponentiationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_exponentiationExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.prefixUnaryExpression()
            self.state = 766
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 756
                    self.match(ScriptParser.POW)
                    self.state = 760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==ScriptParser.NL:
                        self.state = 757
                        self.match(ScriptParser.NL)
                        self.state = 762
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 763
                    self.prefixUnaryExpression() 
                self.state = 768
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixUnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixUnaryExpression(self):
            return self.getTypedRuleContext(ScriptParser.PostfixUnaryExpressionContext,0)


        def prefixUnaryOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.PrefixUnaryOperationContext)
            else:
                return self.getTypedRuleContext(ScriptParser.PrefixUnaryOperationContext,i)


        def getRuleIndex(self):
            return ScriptParser.RULE_prefixUnaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixUnaryExpression" ):
                listener.enterPrefixUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixUnaryExpression" ):
                listener.exitPrefixUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixUnaryExpression" ):
                return visitor.visitPrefixUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def prefixUnaryExpression(self):

        localctx = ScriptParser.PrefixUnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_prefixUnaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScriptParser.ADD) | (1 << ScriptParser.SUB) | (1 << ScriptParser.INCR) | (1 << ScriptParser.DECR) | (1 << ScriptParser.EXCL))) != 0):
                self.state = 769
                self.prefixUnaryOperation()
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 775
            self.postfixUnaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixUnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicExpression(self):
            return self.getTypedRuleContext(ScriptParser.AtomicExpressionContext,0)


        def postfixUnaryOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.PostfixUnaryOperationContext)
            else:
                return self.getTypedRuleContext(ScriptParser.PostfixUnaryOperationContext,i)


        def getRuleIndex(self):
            return ScriptParser.RULE_postfixUnaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnaryExpression" ):
                listener.enterPostfixUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnaryExpression" ):
                listener.exitPostfixUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixUnaryExpression" ):
                return visitor.visitPostfixUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixUnaryExpression(self):

        localctx = ScriptParser.PostfixUnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_postfixUnaryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.atomicExpression()
            self.state = 781
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 778
                    self.postfixUnaryOperation() 
                self.state = 783
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedExpression(self):
            return self.getTypedRuleContext(ScriptParser.ParenthesizedExpressionContext,0)


        def literalConstant(self):
            return self.getTypedRuleContext(ScriptParser.LiteralConstantContext,0)


        def conditionalExpression(self):
            return self.getTypedRuleContext(ScriptParser.ConditionalExpressionContext,0)


        def loopExpression(self):
            return self.getTypedRuleContext(ScriptParser.LoopExpressionContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_atomicExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicExpression" ):
                listener.enterAtomicExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicExpression" ):
                listener.exitAtomicExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomicExpression" ):
                return visitor.visitAtomicExpression(self)
            else:
                return visitor.visitChildren(self)




    def atomicExpression(self):

        localctx = ScriptParser.AtomicExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_atomicExpression)
        try:
            self.state = 789
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ScriptParser.LPAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 784
                self.parenthesizedExpression()
                pass
            elif token in [ScriptParser.FloatLiteral, ScriptParser.IntegerLiteral, ScriptParser.BooleanLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 785
                self.literalConstant()
                pass
            elif token in [ScriptParser.IF]:
                self.enterOuterAlt(localctx, 3)
                self.state = 786
                self.conditionalExpression()
                pass
            elif token in [ScriptParser.WHILE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 787
                self.loopExpression()
                pass
            elif token in [ScriptParser.IMPORT, ScriptParser.ARCHETYPE, ScriptParser.CONST, ScriptParser.GETTER, ScriptParser.SETTER, ScriptParser.PUBLIC, ScriptParser.PRIVATE, ScriptParser.OPERATOR, ScriptParser.DATA, ScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 5)
                self.state = 788
                self.simpleIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ScriptParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(ScriptParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(ScriptParser.RPAREN, 0)

        def getRuleIndex(self):
            return ScriptParser.RULE_parenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenthesizedExpression(self):

        localctx = ScriptParser.ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_parenthesizedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.match(ScriptParser.LPAREN)
            self.state = 792
            self.expression()
            self.state = 793
            self.match(ScriptParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallSuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueArguments(self):
            return self.getTypedRuleContext(ScriptParser.ValueArgumentsContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_callSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallSuffix" ):
                listener.enterCallSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallSuffix" ):
                listener.exitCallSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallSuffix" ):
                return visitor.visitCallSuffix(self)
            else:
                return visitor.visitChildren(self)




    def callSuffix(self):

        localctx = ScriptParser.CallSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_callSuffix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.valueArguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ScriptParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ScriptParser.RPAREN, 0)

        def valueArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.ValueArgumentContext)
            else:
                return self.getTypedRuleContext(ScriptParser.ValueArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.COMMA)
            else:
                return self.getToken(ScriptParser.COMMA, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_valueArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArguments" ):
                listener.enterValueArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArguments" ):
                listener.exitValueArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueArguments" ):
                return visitor.visitValueArguments(self)
            else:
                return visitor.visitChildren(self)




    def valueArguments(self):

        localctx = ScriptParser.ValueArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_valueArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.match(ScriptParser.LPAREN)
            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScriptParser.LPAREN) | (1 << ScriptParser.ADD) | (1 << ScriptParser.SUB) | (1 << ScriptParser.INCR) | (1 << ScriptParser.DECR) | (1 << ScriptParser.EXCL) | (1 << ScriptParser.IMPORT) | (1 << ScriptParser.ARCHETYPE) | (1 << ScriptParser.CONST) | (1 << ScriptParser.IF) | (1 << ScriptParser.WHILE) | (1 << ScriptParser.GETTER) | (1 << ScriptParser.SETTER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScriptParser.PUBLIC - 64)) | (1 << (ScriptParser.PRIVATE - 64)) | (1 << (ScriptParser.OPERATOR - 64)) | (1 << (ScriptParser.DATA - 64)) | (1 << (ScriptParser.FloatLiteral - 64)) | (1 << (ScriptParser.IntegerLiteral - 64)) | (1 << (ScriptParser.BooleanLiteral - 64)) | (1 << (ScriptParser.Identifier - 64)))) != 0):
                self.state = 798
                self.valueArgument()
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.COMMA:
                    self.state = 799
                    self.match(ScriptParser.COMMA)
                    self.state = 800
                    self.valueArgument()
                    self.state = 805
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 808
            self.match(ScriptParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(ScriptParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_valueArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArgument" ):
                listener.enterValueArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArgument" ):
                listener.exitValueArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueArgument" ):
                return visitor.visitValueArgument(self)
            else:
                return visitor.visitChildren(self)




    def valueArgument(self):

        localctx = ScriptParser.ValueArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_valueArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifExpression(self):
            return self.getTypedRuleContext(ScriptParser.IfExpressionContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalExpression" ):
                return visitor.visitConditionalExpression(self)
            else:
                return visitor.visitChildren(self)




    def conditionalExpression(self):

        localctx = ScriptParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_conditionalExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.ifExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(ScriptParser.IF, 0)

        def LPAREN(self):
            return self.getToken(ScriptParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(ScriptParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(ScriptParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def controlStructureBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.ControlStructureBodyContext)
            else:
                return self.getTypedRuleContext(ScriptParser.ControlStructureBodyContext,i)


        def SEMICOLON(self):
            return self.getToken(ScriptParser.SEMICOLON, 0)

        def ELSE(self):
            return self.getToken(ScriptParser.ELSE, 0)

        def getRuleIndex(self):
            return ScriptParser.RULE_ifExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpression" ):
                listener.enterIfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpression" ):
                listener.exitIfExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExpression" ):
                return visitor.visitIfExpression(self)
            else:
                return visitor.visitChildren(self)




    def ifExpression(self):

        localctx = ScriptParser.IfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_ifExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.match(ScriptParser.IF)
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 815
                self.match(ScriptParser.NL)
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 821
            self.match(ScriptParser.LPAREN)
            self.state = 822
            self.expression()
            self.state = 823
            self.match(ScriptParser.RPAREN)
            self.state = 827
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 824
                    self.match(ScriptParser.NL) 
                self.state = 829
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

            self.state = 831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 830
                self.controlStructureBody()


            self.state = 834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 833
                self.match(ScriptParser.SEMICOLON)


            self.state = 852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.NL:
                    self.state = 836
                    self.match(ScriptParser.NL)
                    self.state = 841
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 842
                self.match(ScriptParser.ELSE)
                self.state = 846
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 843
                        self.match(ScriptParser.NL) 
                    self.state = 848
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

                self.state = 850
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 849
                    self.controlStructureBody()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStructureBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(ScriptParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(ScriptParser.ExpressionContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_controlStructureBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlStructureBody" ):
                listener.enterControlStructureBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlStructureBody" ):
                listener.exitControlStructureBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlStructureBody" ):
                return visitor.visitControlStructureBody(self)
            else:
                return visitor.visitChildren(self)




    def controlStructureBody(self):

        localctx = ScriptParser.ControlStructureBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_controlStructureBody)
        try:
            self.state = 856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ScriptParser.LCURL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 854
                self.block()
                pass
            elif token in [ScriptParser.LPAREN, ScriptParser.ADD, ScriptParser.SUB, ScriptParser.INCR, ScriptParser.DECR, ScriptParser.EXCL, ScriptParser.IMPORT, ScriptParser.ARCHETYPE, ScriptParser.CONST, ScriptParser.IF, ScriptParser.WHILE, ScriptParser.GETTER, ScriptParser.SETTER, ScriptParser.PUBLIC, ScriptParser.PRIVATE, ScriptParser.OPERATOR, ScriptParser.DATA, ScriptParser.FloatLiteral, ScriptParser.IntegerLiteral, ScriptParser.BooleanLiteral, ScriptParser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 855
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whileExpression(self):
            return self.getTypedRuleContext(ScriptParser.WhileExpressionContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_loopExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopExpression" ):
                listener.enterLoopExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopExpression" ):
                listener.exitLoopExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopExpression" ):
                return visitor.visitLoopExpression(self)
            else:
                return visitor.visitChildren(self)




    def loopExpression(self):

        localctx = ScriptParser.LoopExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_loopExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.whileExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(ScriptParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(ScriptParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(ScriptParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(ScriptParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def controlStructureBody(self):
            return self.getTypedRuleContext(ScriptParser.ControlStructureBodyContext,0)


        def getRuleIndex(self):
            return ScriptParser.RULE_whileExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileExpression" ):
                listener.enterWhileExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileExpression" ):
                listener.exitWhileExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileExpression" ):
                return visitor.visitWhileExpression(self)
            else:
                return visitor.visitChildren(self)




    def whileExpression(self):

        localctx = ScriptParser.WhileExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_whileExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(ScriptParser.WHILE)
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 861
                self.match(ScriptParser.NL)
                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 867
            self.match(ScriptParser.LPAREN)
            self.state = 868
            self.expression()
            self.state = 869
            self.match(ScriptParser.RPAREN)
            self.state = 873
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 870
                    self.match(ScriptParser.NL) 
                self.state = 875
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

            self.state = 877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 876
                self.controlStructureBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.ModifierContext)
            else:
                return self.getTypedRuleContext(ScriptParser.ModifierContext,i)


        def getRuleIndex(self):
            return ScriptParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierList" ):
                return visitor.visitModifierList(self)
            else:
                return visitor.visitChildren(self)




    def modifierList(self):

        localctx = ScriptParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_modifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 879
                self.modifier()
                self.state = 882 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScriptParser.PUBLIC - 64)) | (1 << (ScriptParser.PRIVATE - 64)) | (1 << (ScriptParser.SHARED - 64)) | (1 << (ScriptParser.STATIC - 64)) | (1 << (ScriptParser.OPERATOR - 64)) | (1 << (ScriptParser.DATA - 64)) | (1 << (ScriptParser.SPAWNINIT - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(ScriptParser.PUBLIC, 0)

        def PRIVATE(self):
            return self.getToken(ScriptParser.PRIVATE, 0)

        def SHARED(self):
            return self.getToken(ScriptParser.SHARED, 0)

        def STATIC(self):
            return self.getToken(ScriptParser.STATIC, 0)

        def OPERATOR(self):
            return self.getToken(ScriptParser.OPERATOR, 0)

        def DATA(self):
            return self.getToken(ScriptParser.DATA, 0)

        def SPAWNINIT(self):
            return self.getToken(ScriptParser.SPAWNINIT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier" ):
                return visitor.visitModifier(self)
            else:
                return visitor.visitChildren(self)




    def modifier(self):

        localctx = ScriptParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            _la = self._input.LA(1)
            if not(((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (ScriptParser.PUBLIC - 64)) | (1 << (ScriptParser.PRIVATE - 64)) | (1 << (ScriptParser.SHARED - 64)) | (1 << (ScriptParser.STATIC - 64)) | (1 << (ScriptParser.OPERATOR - 64)) | (1 << (ScriptParser.DATA - 64)) | (1 << (ScriptParser.SPAWNINIT - 64)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL:
                self.state = 885
                self.match(ScriptParser.NL)
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ScriptParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.DOT)
            else:
                return self.getToken(ScriptParser.DOT, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = ScriptParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.simpleIdentifier()
            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==ScriptParser.NL or _la==ScriptParser.DOT:
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.NL:
                    self.state = 892
                    self.match(ScriptParser.NL)
                    self.state = 897
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 898
                self.match(ScriptParser.DOT)
                self.state = 899
                self.simpleIdentifier()
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(ScriptParser.Identifier, 0)

        def DATA(self):
            return self.getToken(ScriptParser.DATA, 0)

        def GETTER(self):
            return self.getToken(ScriptParser.GETTER, 0)

        def IMPORT(self):
            return self.getToken(ScriptParser.IMPORT, 0)

        def OPERATOR(self):
            return self.getToken(ScriptParser.OPERATOR, 0)

        def PRIVATE(self):
            return self.getToken(ScriptParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(ScriptParser.PUBLIC, 0)

        def SETTER(self):
            return self.getToken(ScriptParser.SETTER, 0)

        def ARCHETYPE(self):
            return self.getToken(ScriptParser.ARCHETYPE, 0)

        def CONST(self):
            return self.getToken(ScriptParser.CONST, 0)

        def getRuleIndex(self):
            return ScriptParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleIdentifier" ):
                return visitor.visitSimpleIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def simpleIdentifier(self):

        localctx = ScriptParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            _la = self._input.LA(1)
            if not(((((_la - 47)) & ~0x3f) == 0 and ((1 << (_la - 47)) & ((1 << (ScriptParser.IMPORT - 47)) | (1 << (ScriptParser.ARCHETYPE - 47)) | (1 << (ScriptParser.CONST - 47)) | (1 << (ScriptParser.GETTER - 47)) | (1 << (ScriptParser.SETTER - 47)) | (1 << (ScriptParser.PUBLIC - 47)) | (1 << (ScriptParser.PRIVATE - 47)) | (1 << (ScriptParser.OPERATOR - 47)) | (1 << (ScriptParser.DATA - 47)) | (1 << (ScriptParser.Identifier - 47)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(ScriptParser.BooleanLiteral, 0)

        def IntegerLiteral(self):
            return self.getToken(ScriptParser.IntegerLiteral, 0)

        def FloatLiteral(self):
            return self.getToken(ScriptParser.FloatLiteral, 0)

        def getRuleIndex(self):
            return ScriptParser.RULE_literalConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralConstant" ):
                listener.enterLiteralConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralConstant" ):
                listener.exitLiteralConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralConstant" ):
                return visitor.visitLiteralConstant(self)
            else:
                return visitor.visitChildren(self)




    def literalConstant(self):

        localctx = ScriptParser.LiteralConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_literalConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            _la = self._input.LA(1)
            if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (ScriptParser.FloatLiteral - 71)) | (1 << (ScriptParser.IntegerLiteral - 71)) | (1 << (ScriptParser.BooleanLiteral - 71)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(ScriptParser.ADD, 0)

        def SUB(self):
            return self.getToken(ScriptParser.SUB, 0)

        def getRuleIndex(self):
            return ScriptParser.RULE_additiveOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveOperator" ):
                listener.enterAdditiveOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveOperator" ):
                listener.exitAdditiveOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveOperator" ):
                return visitor.visitAdditiveOperator(self)
            else:
                return visitor.visitChildren(self)




    def additiveOperator(self):

        localctx = ScriptParser.AdditiveOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_additiveOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            _la = self._input.LA(1)
            if not(_la==ScriptParser.ADD or _la==ScriptParser.SUB):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULT(self):
            return self.getToken(ScriptParser.MULT, 0)

        def DIV(self):
            return self.getToken(ScriptParser.DIV, 0)

        def MOD(self):
            return self.getToken(ScriptParser.MOD, 0)

        def getRuleIndex(self):
            return ScriptParser.RULE_multiplicativeOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeOperation" ):
                listener.enterMultiplicativeOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeOperation" ):
                listener.exitMultiplicativeOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeOperation" ):
                return visitor.visitMultiplicativeOperation(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeOperation(self):

        localctx = ScriptParser.MultiplicativeOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_multiplicativeOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScriptParser.MULT) | (1 << ScriptParser.MOD) | (1 << ScriptParser.DIV))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixUnaryOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(ScriptParser.INCR, 0)

        def DECR(self):
            return self.getToken(ScriptParser.DECR, 0)

        def ADD(self):
            return self.getToken(ScriptParser.ADD, 0)

        def SUB(self):
            return self.getToken(ScriptParser.SUB, 0)

        def EXCL(self):
            return self.getToken(ScriptParser.EXCL, 0)

        def getRuleIndex(self):
            return ScriptParser.RULE_prefixUnaryOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixUnaryOperation" ):
                listener.enterPrefixUnaryOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixUnaryOperation" ):
                listener.exitPrefixUnaryOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixUnaryOperation" ):
                return visitor.visitPrefixUnaryOperation(self)
            else:
                return visitor.visitChildren(self)




    def prefixUnaryOperation(self):

        localctx = ScriptParser.PrefixUnaryOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_prefixUnaryOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScriptParser.ADD) | (1 << ScriptParser.SUB) | (1 << ScriptParser.INCR) | (1 << ScriptParser.DECR) | (1 << ScriptParser.EXCL))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixUnaryOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(ScriptParser.INCR, 0)

        def DECR(self):
            return self.getToken(ScriptParser.DECR, 0)

        def EXCL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.EXCL)
            else:
                return self.getToken(ScriptParser.EXCL, i)

        def callSuffix(self):
            return self.getTypedRuleContext(ScriptParser.CallSuffixContext,0)


        def memberAccessOperator(self):
            return self.getTypedRuleContext(ScriptParser.MemberAccessOperatorContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(ScriptParser.SimpleIdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def getRuleIndex(self):
            return ScriptParser.RULE_postfixUnaryOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnaryOperation" ):
                listener.enterPostfixUnaryOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnaryOperation" ):
                listener.exitPostfixUnaryOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixUnaryOperation" ):
                return visitor.visitPostfixUnaryOperation(self)
            else:
                return visitor.visitChildren(self)




    def postfixUnaryOperation(self):

        localctx = ScriptParser.PostfixUnaryOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_postfixUnaryOperation)
        self._la = 0 # Token type
        try:
            self.state = 929
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [ScriptParser.INCR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 915
                self.match(ScriptParser.INCR)
                pass
            elif token in [ScriptParser.DECR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 916
                self.match(ScriptParser.DECR)
                pass
            elif token in [ScriptParser.EXCL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 917
                self.match(ScriptParser.EXCL)
                self.state = 918
                self.match(ScriptParser.EXCL)
                pass
            elif token in [ScriptParser.LPAREN]:
                self.enterOuterAlt(localctx, 4)
                self.state = 919
                self.callSuffix()
                pass
            elif token in [ScriptParser.NL, ScriptParser.DOT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.NL:
                    self.state = 920
                    self.match(ScriptParser.NL)
                    self.state = 925
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 926
                self.memberAccessOperator()
                self.state = 927
                self.simpleIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberAccessOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(ScriptParser.DOT, 0)

        def getRuleIndex(self):
            return ScriptParser.RULE_memberAccessOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessOperator" ):
                listener.enterMemberAccessOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessOperator" ):
                listener.exitMemberAccessOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccessOperator" ):
                return visitor.visitMemberAccessOperator(self)
            else:
                return visitor.visitChildren(self)




    def memberAccessOperator(self):

        localctx = ScriptParser.MemberAccessOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_memberAccessOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.match(ScriptParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(ScriptParser.ASSIGNMENT, 0)

        def ADD_ASSIGNMENT(self):
            return self.getToken(ScriptParser.ADD_ASSIGNMENT, 0)

        def SUB_ASSIGNMENT(self):
            return self.getToken(ScriptParser.SUB_ASSIGNMENT, 0)

        def MULT_ASSIGNMENT(self):
            return self.getToken(ScriptParser.MULT_ASSIGNMENT, 0)

        def DIV_ASSIGNMENT(self):
            return self.getToken(ScriptParser.DIV_ASSIGNMENT, 0)

        def MOD_ASSIGNMENT(self):
            return self.getToken(ScriptParser.MOD_ASSIGNMENT, 0)

        def getRuleIndex(self):
            return ScriptParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperator" ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = ScriptParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScriptParser.ASSIGNMENT) | (1 << ScriptParser.ADD_ASSIGNMENT) | (1 << ScriptParser.SUB_ASSIGNMENT) | (1 << ScriptParser.MULT_ASSIGNMENT) | (1 << ScriptParser.DIV_ASSIGNMENT) | (1 << ScriptParser.MOD_ASSIGNMENT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL_EQ(self):
            return self.getToken(ScriptParser.EXCL_EQ, 0)

        def EQEQ(self):
            return self.getToken(ScriptParser.EQEQ, 0)

        def getRuleIndex(self):
            return ScriptParser.RULE_equalityOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityOperation" ):
                listener.enterEqualityOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityOperation" ):
                listener.exitEqualityOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityOperation" ):
                return visitor.visitEqualityOperation(self)
            else:
                return visitor.visitChildren(self)




    def equalityOperation(self):

        localctx = ScriptParser.EqualityOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_equalityOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            _la = self._input.LA(1)
            if not(_la==ScriptParser.EXCL_EQ or _la==ScriptParser.EQEQ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(ScriptParser.LANGLE, 0)

        def RANGLE(self):
            return self.getToken(ScriptParser.RANGLE, 0)

        def LE(self):
            return self.getToken(ScriptParser.LE, 0)

        def GE(self):
            return self.getToken(ScriptParser.GE, 0)

        def getRuleIndex(self):
            return ScriptParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = ScriptParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << ScriptParser.LANGLE) | (1 << ScriptParser.RANGLE) | (1 << ScriptParser.LE) | (1 << ScriptParser.GE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SemiContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(ScriptParser.NL)
            else:
                return self.getToken(ScriptParser.NL, i)

        def SEMICOLON(self):
            return self.getToken(ScriptParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ScriptParser.RULE_semi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemi" ):
                listener.enterSemi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemi" ):
                listener.exitSemi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSemi" ):
                return visitor.visitSemi(self)
            else:
                return visitor.visitChildren(self)




    def semi(self):

        localctx = ScriptParser.SemiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_semi)
        self._la = 0 # Token type
        try:
            self.state = 957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 940 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 939
                        self.match(ScriptParser.NL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 942 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==ScriptParser.NL:
                    self.state = 944
                    self.match(ScriptParser.NL)
                    self.state = 949
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 950
                self.match(ScriptParser.SEMICOLON)
                self.state = 954
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 951
                        self.match(ScriptParser.NL) 
                    self.state = 956
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnysemiContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self):
            return self.getToken(ScriptParser.NL, 0)

        def SEMICOLON(self):
            return self.getToken(ScriptParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ScriptParser.RULE_anysemi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnysemi" ):
                listener.enterAnysemi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnysemi" ):
                listener.exitAnysemi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnysemi" ):
                return visitor.visitAnysemi(self)
            else:
                return visitor.visitChildren(self)




    def anysemi(self):

        localctx = ScriptParser.AnysemiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_anysemi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            _la = self._input.LA(1)
            if not(_la==ScriptParser.NL or _la==ScriptParser.SEMICOLON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





